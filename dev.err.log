 тип [Error [TypeError]: Cannot read properties of undefined (reading 'custom')]
 тип [Error [TypeError]: Cannot read properties of undefined (reading 'custom')]
 тип Error: The Middleware "/middleware" must export a `middleware` or a `default` function
    at <unknown> (edge-wrapper.js:2:7)
  1 | self._ENTRIES ||= {};
> 2 | const modProm = import('MODULE');
    |       ^
  3 | modProm.catch(() => {});
  4 | self._ENTRIES["middleware_middleware"] = new Proxy(modProm, {
  5 |     get(modProm, name) {
 тип Error: The Middleware "/middleware" must export a `middleware` or a `default` function
    at <unknown> (edge-wrapper.js:2:7)
  1 | self._ENTRIES ||= {};
> 2 | const modProm = import('MODULE');
    |       ^
  3 | modProm.catch(() => {});
  4 | self._ENTRIES["middleware_middleware"] = new Proxy(modProm, {
  5 |     get(modProm, name) {
 тип Error: The Middleware "/middleware" must export a `middleware` or a `default` function
    at <unknown> (edge-wrapper.js:2:7)
  1 | self._ENTRIES ||= {};
> 2 | const modProm = import('MODULE');
    |       ^
  3 | modProm.catch(() => {});
  4 | self._ENTRIES["middleware_middleware"] = new Proxy(modProm, {
  5 |     get(modProm, name) {
 тип Error: The Middleware "/middleware" must export a `middleware` or a `default` function
    at <unknown> (edge-wrapper.js:2:7)
  1 | self._ENTRIES ||= {};
> 2 | const modProm = import('MODULE');
    |       ^
  3 | modProm.catch(() => {});
  4 | self._ENTRIES["middleware_middleware"] = new Proxy(modProm, {
  5 |     get(modProm, name) {
 тип Error: The Middleware "/middleware" must export a `middleware` or a `default` function
    at <unknown> (edge-wrapper.js:2:7)
  1 | self._ENTRIES ||= {};
> 2 | const modProm = import('MODULE');
    |       ^
  3 | modProm.catch(() => {});
  4 | self._ENTRIES["middleware_middleware"] = new Proxy(modProm, {
  5 |     get(modProm, name) {
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
 тип Error: The Middleware "/middleware" must export a `middleware` or a `default` function
    at <unknown> (edge-wrapper.js:2:7)
  1 | self._ENTRIES ||= {};
> 2 | const modProm = import('MODULE');
    |       ^
  3 | modProm.catch(() => {});
  4 | self._ENTRIES["middleware_middleware"] = new Proxy(modProm, {
  5 |     get(modProm, name) {
 тип Error: The Middleware "/middleware" must export a `middleware` or a `default` function
    at <unknown> (edge-wrapper.js:2:7)
  1 | self._ENTRIES ||= {};
> 2 | const modProm = import('MODULE');
    |       ^
  3 | modProm.catch(() => {});
  4 | self._ENTRIES["middleware_middleware"] = new Proxy(modProm, {
  5 |     get(modProm, name) {
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[Error: failed to pipe response] { [cause]: 'timeout' }
[Error: failed to pipe response] { [cause]: 'timeout' }
 тип [Error: The default export is not a React Component in "/chat/layout"]
 тип [Error: The default export is not a React Component in "/chat/layout"] {
  page: '/chat'
}
 тип ./app/chat/layout.tsx:5:1
Module not found: Can't resolve './sidebarClient'
[0m [90m 3 |[39m [36mimport[39m { authOptions } [36mfrom[39m [32m'@/lib/auth'[39m
 [90m 4 |[39m [36mimport[39m { prisma } [36mfrom[39m [32m'@/lib/prisma'[39m
[31m[1m>[22m[39m[90m 5 |[39m [36mimport[39m [33mSidebarClient[39m [36mfrom[39m [32m'./sidebarClient'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 6 |[39m
 [90m 7 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mChatLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 8 |[39m 	[36mconst[39m session [33m=[39m [36mawait[39m getServerSession(authOptions)[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/chat/layout.tsx:5:1
Module not found: Can't resolve './sidebarClient'
[0m [90m 3 |[39m [36mimport[39m { authOptions } [36mfrom[39m [32m'@/lib/auth'[39m
 [90m 4 |[39m [36mimport[39m { prisma } [36mfrom[39m [32m'@/lib/prisma'[39m
[31m[1m>[22m[39m[90m 5 |[39m [36mimport[39m [33mSidebarClient[39m [36mfrom[39m [32m'./sidebarClient'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 6 |[39m
 [90m 7 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mChatLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 8 |[39m 	[36mconst[39m session [33m=[39m [36mawait[39m getServerSession(authOptions)[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/chat/layout.tsx:5:1
Module not found: Can't resolve './sidebarClient'
[0m [90m 3 |[39m [36mimport[39m { authOptions } [36mfrom[39m [32m'@/lib/auth'[39m
 [90m 4 |[39m [36mimport[39m { prisma } [36mfrom[39m [32m'@/lib/prisma'[39m
[31m[1m>[22m[39m[90m 5 |[39m [36mimport[39m [33mSidebarClient[39m [36mfrom[39m [32m'./sidebarClient'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 6 |[39m
 [90m 7 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mChatLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 8 |[39m 	[36mconst[39m session [33m=[39m [36mawait[39m getServerSession(authOptions)[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/chat/layout.tsx:5:1
Module not found: Can't resolve './sidebarClient'
[0m [90m 3 |[39m [36mimport[39m { authOptions } [36mfrom[39m [32m'@/lib/auth'[39m
 [90m 4 |[39m [36mimport[39m { prisma } [36mfrom[39m [32m'@/lib/prisma'[39m
[31m[1m>[22m[39m[90m 5 |[39m [36mimport[39m [33mSidebarClient[39m [36mfrom[39m [32m'./sidebarClient'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 6 |[39m
 [90m 7 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mChatLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 8 |[39m 	[36mconst[39m session [33m=[39m [36mawait[39m getServerSession(authOptions)[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/chat/layout.tsx:5:1
Module not found: Can't resolve './sidebarClient'
[0m [90m 3 |[39m [36mimport[39m { authOptions } [36mfrom[39m [32m'@/lib/auth'[39m
 [90m 4 |[39m [36mimport[39m { prisma } [36mfrom[39m [32m'@/lib/prisma'[39m
[31m[1m>[22m[39m[90m 5 |[39m [36mimport[39m [33mSidebarClient[39m [36mfrom[39m [32m'./sidebarClient'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 6 |[39m
 [90m 7 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mChatLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 8 |[39m 	[36mconst[39m session [33m=[39m [36mawait[39m getServerSession(authOptions)[0m



https://nextjs.org/docs/messages/module-not-found


[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
 тЪа Fast Refresh had to perform a full reload due to a runtime error.
 тип [Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.] {
  digest: '4023240000'
}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:10:65)
   8 | 	const session = await getServerSession(authOptions)
   9 | 	if (!session?.user?.id) return notFound()
> 10 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  11 | 	if (!chat) return notFound()
  12 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  13 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:10:65)
   8 | 	const session = await getServerSession(authOptions)
   9 | 	if (!session?.user?.id) return notFound()
> 10 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  11 | 	if (!chat) return notFound()
  12 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  13 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:10:65)
   8 | 	const session = await getServerSession(authOptions)
   9 | 	if (!session?.user?.id) return notFound()
> 10 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  11 | 	if (!chat) return notFound()
  12 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  13 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:10:65)
   8 | 	const session = await getServerSession(authOptions)
   9 | 	if (!session?.user?.id) return notFound()
> 10 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  11 | 	if (!chat) return notFound()
  12 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  13 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:10:65)
   8 | 	const session = await getServerSession(authOptions)
   9 | 	if (!session?.user?.id) return notFound()
> 10 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  11 | 	if (!chat) return notFound()
  12 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  13 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:10:65)
   8 | 	const session = await getServerSession(authOptions)
   9 | 	if (!session?.user?.id) return notFound()
> 10 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  11 | 	if (!chat) return notFound()
  12 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  13 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:10:65)
   8 | 	const session = await getServerSession(authOptions)
   9 | 	if (!session?.user?.id) return notFound()
> 10 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  11 | 	if (!chat) return notFound()
  12 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  13 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
[Error: aborted] { code: 'ECONNRESET' }
 тип uncaughtException: [Error: aborted] { code: 'ECONNRESET' }
 тип uncaughtException:  [Error: aborted] { code: 'ECONNRESET' }
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
[Error: aborted] { code: 'ECONNRESET' }
 тип uncaughtException: [Error: aborted] { code: 'ECONNRESET' }
 тип uncaughtException:  [Error: aborted] { code: 'ECONNRESET' }
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
[Error: aborted] { code: 'ECONNRESET' }
 тип uncaughtException: [Error: aborted] { code: 'ECONNRESET' }
 тип uncaughtException:  [Error: aborted] { code: 'ECONNRESET' }
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PATCH (app\api\chats\[id]\route.ts:21:23)
  19 | 	}
  20 | 	const updated = await prisma.chat.update({
> 21 | 		where: { id: params.id },
     | 		                    ^
  22 | 		data: { title: title.trim() },
  23 | 	})
  24 | 	return NextResponse.json(updated)
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
[Error: aborted] { code: 'ECONNRESET' }
 тип uncaughtException: [Error: aborted] { code: 'ECONNRESET' }
 тип uncaughtException:  [Error: aborted] { code: 'ECONNRESET' }
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:22:65)
  20 | 	const session = await getSessionOrBypass()
  21 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 22 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  23 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  24 |
  25 | 	const { content } = await req.json()
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:22:65)
  20 | 	const session = await getSessionOrBypass()
  21 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 22 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  23 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  24 |
  25 | 	const { content } = await req.json()
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:22:65)
  20 | 	const session = await getSessionOrBypass()
  21 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 22 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  23 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  24 |
  25 | 	const { content } = await req.json()
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at DELETE (app\api\chats\[id]\route.ts:30:49)
  28 | 	const session = await getSessionOrBypass()
  29 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 30 | 	await prisma.chat.delete({ where: { id: params.id } })
     | 	                                               ^
  31 | 	return NextResponse.json({ ok: true })
  32 | }
  33 |
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at DELETE (app\api\chats\[id]\route.ts:30:49)
  28 | 	const session = await getSessionOrBypass()
  29 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 30 | 	await prisma.chat.delete({ where: { id: params.id } })
     | 	                                               ^
  31 | 	return NextResponse.json({ ok: true })
  32 | }
  33 |
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:22:65)
  20 | 	const session = await getSessionOrBypass()
  21 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 22 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  23 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  24 |
  25 | 	const { content } = await req.json()
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:22:65)
  20 | 	const session = await getSessionOrBypass()
  21 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 22 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  23 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  24 |
  25 | 	const { content } = await req.json()
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at DELETE (app\api\chats\[id]\route.ts:30:49)
  28 | 	const session = await getSessionOrBypass()
  29 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 30 | 	await prisma.chat.delete({ where: { id: params.id } })
     | 	                                               ^
  31 | 	return NextResponse.json({ ok: true })
  32 | }
  33 |
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:26:65)
  24 | 	const session = await getSessionOrBypass()
  25 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 26 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  27 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  28 |
  29 | 	const { content } = await req.json()
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
 тип Error: Event handlers cannot be passed to Client Component props.
  <input name="q" placeholder=... className=... onChange={function onChange}>
                                                         ^^^^^^^^^^^^^^^^^^^
If you need interactivity, consider converting part of this to a Client Component.
    at stringify (<anonymous>) {
  digest: '849067335'
}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
 тип Error: Event handlers cannot be passed to Client Component props.
  <input name="q" placeholder=... className=... onChange={function onChange}>
                                                         ^^^^^^^^^^^^^^^^^^^
If you need interactivity, consider converting part of this to a Client Component.
    at stringify (<anonymous>) {
  digest: '849067335'
}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error [PrismaClientKnownRequestError]: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `1`. Message: `near "exists": syntax error`
    at async ensureFtsReady (app\api\search\route.ts:9:39)
    at async GET (app\api\search\route.ts:52:5)
   7 | async function ensureFtsReady() {
   8 |     // Create FTS table and triggers if they do not exist
>  9 |     const [{ exists: tableExists }] = await prisma.$queryRawUnsafe<any[]>(
     |                                       ^
  10 |         "SELECT EXISTS(SELECT 1 FROM sqlite_master WHERE type='table' AND name='message_fts') as exists"
  11 |     )
  12 |     if (!tableExists) { {
  code: 'P2010',
  meta: [Object],
  clientVersion: '6.15.0'
}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
FTS search fallback: Error [PrismaClientKnownRequestError]: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `1`. Message: `near "exists": syntax error`
    at async ensureFtsReady (app\api\search\route.ts:9:39)
    at async GET (app\api\search\route.ts:53:9)
   7 | async function ensureFtsReady() {
   8 |     // Create FTS table and triggers if they do not exist
>  9 |     const [{ exists: tableExists }] = await prisma.$queryRawUnsafe<any[]>(
     |                                       ^
  10 |         "SELECT EXISTS(SELECT 1 FROM sqlite_master WHERE type='table' AND name='message_fts') as exists"
  11 |     )
  12 |     if (!tableExists) { {
  code: 'P2010',
  meta: [Object],
  clientVersion: '6.15.0'
}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
 тип Error: Event handlers cannot be passed to Client Component props.
  <input name="q" placeholder=... className=... onChange={function onChange}>
                                                         ^^^^^^^^^^^^^^^^^^^
If you need interactivity, consider converting part of this to a Client Component.
    at stringify (<anonymous>) {
  digest: '849067335'
}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
 тип Error: Event handlers cannot be passed to Client Component props.
  <input name="q" placeholder=... className=... onChange={function onChange}>
                                                         ^^^^^^^^^^^^^^^^^^^
If you need interactivity, consider converting part of this to a Client Component.
    at stringify (<anonymous>) {
  digest: '849067335'
}
 тЪа Fast Refresh had to perform a full reload due to a runtime error.
 тип Error: Event handlers cannot be passed to Client Component props.
  <input name="q" placeholder=... className=... onChange={function onChange}>
                                                         ^^^^^^^^^^^^^^^^^^^
If you need interactivity, consider converting part of this to a Client Component.
    at stringify (<anonymous>) {
  digest: '849067335'
}
 тип ./app/chat/layout.tsx:7:22
Ecmascript file had an error
[0m [90m  5 |[39m [36mimport[39m [33mLink[39m [36mfrom[39m [32m'next/link'[39m
 [90m  6 |[39m [36mimport[39m dynamic [36mfrom[39m [32m'next/dynamic'[39m
[31m[1m>[22m[39m[90m  7 |[39m [36mconst[39m [33mSearchClient[39m [33m=[39m dynamic(() [33m=>[39m [36mimport[39m([32m'./searchClient'[39m)[33m,[39m { ssr[33m:[39m [36mfalse[39m })
 [90m    |[39m                      [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m  8 |[39m
 [90m  9 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mChatLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 10 |[39m 	[36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m

`ssr: false` is not allowed with `next/dynamic` in Server Components. Please move it into a Client Component.


 тип ./app/chat/layout.tsx:7:22
Ecmascript file had an error
[0m [90m  5 |[39m [36mimport[39m [33mLink[39m [36mfrom[39m [32m'next/link'[39m
 [90m  6 |[39m [36mimport[39m dynamic [36mfrom[39m [32m'next/dynamic'[39m
[31m[1m>[22m[39m[90m  7 |[39m [36mconst[39m [33mSearchClient[39m [33m=[39m dynamic(() [33m=>[39m [36mimport[39m([32m'./searchClient'[39m)[33m,[39m { ssr[33m:[39m [36mfalse[39m })
 [90m    |[39m                      [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m  8 |[39m
 [90m  9 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mChatLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 10 |[39m 	[36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m

`ssr: false` is not allowed with `next/dynamic` in Server Components. Please move it into a Client Component.


[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
 тип [Error: Module [project]/node_modules/next/dist/esm/lib/framework/boundary-components.js [app-ssr] (ecmascript) was instantiated because it was required from module [project]/node_modules/next/dist/esm/build/templates/app-page.js?page=/status/page { GLOBAL_ERROR_MODULE => "[project]/node_modules/next/dist/client/components/builtin/global-error.js [app-rsc] (ecmascript, Next.js Server Component)", METADATA_0 => "[project]/app/favicon.ico.mjs { IMAGE => \"[project]/app/favicon.ico (static in ecmascript)\" } [app-rsc] (structured image object, ecmascript, Next.js Server Component)", MODULE_1 => "[project]/app/layout.tsx [app-rsc] (ecmascript, Next.js Server Component)", MODULE_2 => "[project]/node_modules/next/dist/client/components/builtin/not-found.js [app-rsc] (ecmascript, Next.js Server Component)", MODULE_3 => "[project]/node_modules/next/dist/client/components/builtin/forbidden.js [app-rsc] (ecmascript, Next.js Server Component)", MODULE_4 => "[project]/node_modules/next/dist/client/components/builtin/unauthorized.js [app-rsc] (ecmascript, Next.js Server Component)", MODULE_5 => "[project]/node_modules/next/dist/client/components/builtin/global-error.js [app-rsc] (ecmascript, Next.js Server Component)", MODULE_6 => "[project]/app/status/page.tsx [app-rsc] (ecmascript, Next.js Server Component)" } [app-rsc] (ecmascript) <locals>, but the module factory is not available.] {
  digest: '3929216232'
}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at DELETE (app\api\chats\[id]\route.ts:30:49)
  28 | 	const session = await getSessionOrBypass()
  29 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 30 | 	await prisma.chat.delete({ where: { id: params.id } })
     | 	                                               ^
  31 | 	return NextResponse.json({ ok: true })
  32 | }
  33 |
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at DELETE (app\api\chats\[id]\route.ts:30:49)
  28 | 	const session = await getSessionOrBypass()
  29 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 30 | 	await prisma.chat.delete({ where: { id: params.id } })
     | 	                                               ^
  31 | 	return NextResponse.json({ ok: true })
  32 | }
  33 |
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at DELETE (app\api\chats\[id]\route.ts:30:49)
  28 | 	const session = await getSessionOrBypass()
  29 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 30 | 	await prisma.chat.delete({ where: { id: params.id } })
     | 	                                               ^
  31 | 	return NextResponse.json({ ok: true })
  32 | }
  33 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:26:65)
  24 | 	const session = await getSessionOrBypass()
  25 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 26 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  27 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  28 |
  29 | 	const { content } = await req.json()
[Error: failed to pipe response] { [cause]: 'timeout' }
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:26:65)
  24 | 	const session = await getSessionOrBypass()
  25 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 26 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  27 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  28 |
  29 | 	const { content } = await req.json()
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
 тип [TypeError: Failed to parse URL from /api/admin/model] {
  digest: '2162974385',
  [cause]: [TypeError: Invalid URL] {
    code: 'ERR_INVALID_URL',
    input: '/api/admin/model'
  }
}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminModelPage (app\admin\model\page.tsx:4:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminModelPage (app\admin\model\page.tsx:4:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminPage (app\admin\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminPage (app\admin\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminModelPage (app\admin\model\page.tsx:4:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminModelPage (app\admin\model\page.tsx:4:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminModelPage (app\admin\model\page.tsx:4:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminModelPage (app\admin\model\page.tsx:4:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
 тип [TypeError: Failed to parse URL from /api/admin/model] {
  digest: '2162974385',
  [cause]: [TypeError: Invalid URL] {
    code: 'ERR_INVALID_URL',
    input: '/api/admin/model'
  }
}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminModelPage (app\admin\model\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminModelPage (app\admin\model\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/api/search" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\search\route.ts:45:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/search" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\search\route.ts:45:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
FTS search fallback: Error [PrismaClientKnownRequestError]: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `1`. Message: `near "exists": syntax error`
    at async ensureFtsReady (app\api\search\route.ts:9:39)
    at async GET (app\api\search\route.ts:53:9)
   7 | async function ensureFtsReady() {
   8 |     // Create FTS table and triggers if they do not exist
>  9 |     const [{ exists: tableExists }] = await prisma.$queryRawUnsafe<any[]>(
     |                                       ^
  10 |         "SELECT EXISTS(SELECT 1 FROM sqlite_master WHERE type='table' AND name='message_fts') as exists"
  11 |     )
  12 |     if (!tableExists) { {
  code: 'P2010',
  meta: [Object],
  clientVersion: '6.15.0'
}
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
 тип [Error: aborted]
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexRedirect (app\chat\page.tsx:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexRedirect (app\chat\page.tsx:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]/messages" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\[id]\messages\route.ts:25:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats/[id]/messages" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\[id]\messages\route.ts:25:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:27:65)
  25 | 	const session = await getSessionOrBypass()
  26 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 27 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  28 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  29 |
  30 | 	const { content } = await req.json()
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[Error: aborted] { code: 'ECONNRESET' }
 тип uncaughtException: [Error: aborted] { code: 'ECONNRESET' }
 тип uncaughtException:  [Error: aborted] { code: 'ECONNRESET' }
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async PATCH (app\api\chats\[id]\route.ts:14:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async PATCH (app\api\chats\[id]\route.ts:14:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PATCH (app\api\chats\[id]\route.ts:21:23)
  19 | 	}
  20 | 	const updated = await prisma.chat.update({
> 21 | 		where: { id: params.id },
     | 		                    ^
  22 | 		data: { title: title.trim() },
  23 | 	})
  24 | 	return NextResponse.json(updated)
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[Error: aborted] { code: 'ECONNRESET' }
 тип uncaughtException: [Error: aborted] { code: 'ECONNRESET' }
 тип uncaughtException:  [Error: aborted] { code: 'ECONNRESET' }
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]/messages" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\[id]\messages\route.ts:25:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats/[id]/messages" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\[id]\messages\route.ts:25:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:27:65)
  25 | 	const session = await getSessionOrBypass()
  26 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 27 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  28 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  29 |
  30 | 	const { content } = await req.json()
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
 тип Error: Event handlers cannot be passed to Client Component props.
  <form className=... action=... method=... onSubmit={function onSubmit} children=...>
                                                     ^^^^^^^^^^^^^^^^^^^
If you need interactivity, consider converting part of this to a Client Component.
    at stringify (<anonymous>) {
  digest: '372266151'
}
 тип Error: Event handlers cannot be passed to Client Component props.
  <form className=... action=... method=... onSubmit={function onSubmit} children=...>
                                                     ^^^^^^^^^^^^^^^^^^^
If you need interactivity, consider converting part of this to a Client Component.
    at stringify (<anonymous>) {
  digest: '372266151'
}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
 тип Error: Event handlers cannot be passed to Client Component props.
  <form className=... action=... method=... onSubmit={function onSubmit} children=...>
                                                     ^^^^^^^^^^^^^^^^^^^
If you need interactivity, consider converting part of this to a Client Component.
    at stringify (<anonymous>) {
  digest: '372266151'
}
 тип Error: Event handlers cannot be passed to Client Component props.
  <form className=... action=... method=... onSubmit={function onSubmit} children=...>
                                                     ^^^^^^^^^^^^^^^^^^^
If you need interactivity, consider converting part of this to a Client Component.
    at stringify (<anonymous>) {
  digest: '372266151'
}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
 тип Error: Event handlers cannot be passed to Client Component props.
  <form className=... action=... method=... onSubmit={function onSubmit} children=...>
                                                     ^^^^^^^^^^^^^^^^^^^
If you need interactivity, consider converting part of this to a Client Component.
    at stringify (<anonymous>) {
  digest: '372266151'
}
 тип Error: Event handlers cannot be passed to Client Component props.
  <form className=... action=... method=... onSubmit={function onSubmit} children=...>
                                                     ^^^^^^^^^^^^^^^^^^^
If you need interactivity, consider converting part of this to a Client Component.
    at stringify (<anonymous>) {
  digest: '372266151'
}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
 тип Error: Event handlers cannot be passed to Client Component props.
  <form className=... action=... method=... onSubmit={function onSubmit} children=...>
                                                     ^^^^^^^^^^^^^^^^^^^
If you need interactivity, consider converting part of this to a Client Component.
    at stringify (<anonymous>) {
  digest: '372266151'
}
 тип Error: Event handlers cannot be passed to Client Component props.
  <form className=... action=... method=... onSubmit={function onSubmit} children=...>
                                                     ^^^^^^^^^^^^^^^^^^^
If you need interactivity, consider converting part of this to a Client Component.
    at stringify (<anonymous>) {
  digest: '372266151'
}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
 тЪа Fast Refresh had to perform a full reload due to a runtime error.
 тип Error: Event handlers cannot be passed to Client Component props.
  <form className=... action=... method=... onSubmit={function onSubmit} children=...>
                                                     ^^^^^^^^^^^^^^^^^^^
If you need interactivity, consider converting part of this to a Client Component.
    at stringify (<anonymous>) {
  digest: '372266151'
}
 тип Error: Event handlers cannot be passed to Client Component props.
  <form className=... action=... method=... onSubmit={function onSubmit} children=...>
                                                     ^^^^^^^^^^^^^^^^^^^
If you need interactivity, consider converting part of this to a Client Component.
    at stringify (<anonymous>) {
  digest: '372266151'
}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
 тип [TypeError: Failed to parse URL from /api/admin/stats/trends] {
  digest: '3903054385',
  [cause]: [TypeError: Invalid URL] {
    code: 'ERR_INVALID_URL',
    input: '/api/admin/stats/trends'
  }
}
Invalid DOM property `formaction`. Did you mean `formAction`?
Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window.
 тип [TypeError: Failed to parse URL from /api/admin/stats/trends] {
  digest: '3903054385',
  [cause]: [TypeError: Invalid URL] {
    code: 'ERR_INVALID_URL',
    input: '/api/admin/stats/trends'
  }
}
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
 тип [TypeError: Failed to parse URL from /api/admin/stats/trends] {
  digest: '3903054385',
  [cause]: [TypeError: Invalid URL] {
    code: 'ERR_INVALID_URL',
    input: '/api/admin/stats/trends'
  }
}
 тип Error: Event handlers cannot be passed to Client Component props.
  <form className=... action=... method=... onSubmit={function onSubmit} children=...>
                                                     ^^^^^^^^^^^^^^^^^^^
If you need interactivity, consider converting part of this to a Client Component.
    at stringify (<anonymous>) {
  digest: '372266151'
}
 тип Error: Event handlers cannot be passed to Client Component props.
  <form className=... action=... method=... onSubmit={function onSubmit} children=...>
                                                     ^^^^^^^^^^^^^^^^^^^
If you need interactivity, consider converting part of this to a Client Component.
    at stringify (<anonymous>) {
  digest: '372266151'
}
 тип ./components/TrendChart.tsx:3:1
Module not found: Can't resolve 'lightweight-charts'
[0m [90m 1 |[39m [32m'use client'[39m
 [90m 2 |[39m [36mimport[39m { useEffect[33m,[39m useRef[33m,[39m useState } [36mfrom[39m [32m'react'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m { createChart[33m,[39m [33mColorType[39m[33m,[39m [33mTime[39m } [36mfrom[39m [32m'lightweight-charts'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m type [33mTrendPoint[39m [33m=[39m {
 [90m 6 |[39m     day[33m:[39m string[0m



Import trace:
  Server Component:
    ./components/TrendChart.tsx
    ./app/admin/stats/page.tsx

https://nextjs.org/docs/messages/module-not-found


 тип ./components/TrendChart.tsx:3:1
Module not found: Can't resolve 'lightweight-charts'
[0m [90m 1 |[39m [32m'use client'[39m
 [90m 2 |[39m [36mimport[39m { useEffect[33m,[39m useRef[33m,[39m useState } [36mfrom[39m [32m'react'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m { createChart[33m,[39m [33mColorType[39m[33m,[39m [33mTime[39m } [36mfrom[39m [32m'lightweight-charts'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m type [33mTrendPoint[39m [33m=[39m {
 [90m 6 |[39m     day[33m:[39m string[0m



Import trace:
  Server Component:
    ./components/TrendChart.tsx
    ./app/admin/stats/page.tsx

https://nextjs.org/docs/messages/module-not-found


 тип ./components/TrendChart.tsx:3:1
Module not found: Can't resolve 'lightweight-charts'
[0m [90m 1 |[39m [32m'use client'[39m
 [90m 2 |[39m [36mimport[39m { useEffect[33m,[39m useRef[33m,[39m useState } [36mfrom[39m [32m'react'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m { createChart[33m,[39m [33mColorType[39m[33m,[39m [33mTime[39m } [36mfrom[39m [32m'lightweight-charts'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m type [33mTrendPoint[39m [33m=[39m {
 [90m 6 |[39m     day[33m:[39m string[0m



Import trace:
  Server Component:
    ./components/TrendChart.tsx
    ./app/admin/stats/page.tsx

https://nextjs.org/docs/messages/module-not-found


 тип ./components/TrendChart.tsx:3:1
Module not found: Can't resolve 'lightweight-charts'
[0m [90m 1 |[39m [32m'use client'[39m
 [90m 2 |[39m [36mimport[39m { useEffect[33m,[39m useRef[33m,[39m useState } [36mfrom[39m [32m'react'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m { createChart[33m,[39m [33mColorType[39m[33m,[39m [33mTime[39m } [36mfrom[39m [32m'lightweight-charts'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m type [33mTrendPoint[39m [33m=[39m {
 [90m 6 |[39m     day[33m:[39m string[0m



Import trace:
  Server Component:
    ./components/TrendChart.tsx
    ./app/admin/stats/page.tsx

https://nextjs.org/docs/messages/module-not-found


 тип ./components/TrendChart.tsx:3:1
Module not found: Can't resolve 'lightweight-charts'
[0m [90m 1 |[39m [32m'use client'[39m
 [90m 2 |[39m [36mimport[39m { useEffect[33m,[39m useRef[33m,[39m useState } [36mfrom[39m [32m'react'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m { createChart[33m,[39m [33mColorType[39m[33m,[39m [33mTime[39m } [36mfrom[39m [32m'lightweight-charts'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m type [33mTrendPoint[39m [33m=[39m {
 [90m 6 |[39m     day[33m:[39m string[0m



Import trace:
  Server Component:
    ./components/TrendChart.tsx
    ./app/admin/stats/page.tsx

https://nextjs.org/docs/messages/module-not-found


 тип ./components/TrendChart.tsx:3:1
Module not found: Can't resolve 'lightweight-charts'
[0m [90m 1 |[39m [32m'use client'[39m
 [90m 2 |[39m [36mimport[39m { useEffect[33m,[39m useRef[33m,[39m useState } [36mfrom[39m [32m'react'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m { createChart[33m,[39m [33mColorType[39m[33m,[39m [33mTime[39m } [36mfrom[39m [32m'lightweight-charts'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m type [33mTrendPoint[39m [33m=[39m {
 [90m 6 |[39m     day[33m:[39m string[0m



Import trace:
  Server Component:
    ./components/TrendChart.tsx
    ./app/admin/stats/page.tsx

https://nextjs.org/docs/messages/module-not-found


Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
 тип ./app/admin/stats/page.tsx:4:20
Ecmascript file had an error
[0m [90m 2 |[39m [36mimport[39m { prisma } [36mfrom[39m [32m'@/lib/prisma'[39m
 [90m 3 |[39m [36mimport[39m dynamic [36mfrom[39m [32m'next/dynamic'[39m
[31m[1m>[22m[39m[90m 4 |[39m [36mconst[39m [33mTrendChart[39m [33m=[39m dynamic(() [33m=>[39m [36mimport[39m([32m'@/components/TrendChart'[39m)[33m,[39m { ssr[33m:[39m [36mfalse[39m })
 [90m   |[39m                    [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 5 |[39m
 [90m 6 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminStatsPage[39m() {
 [90m 7 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m

`ssr: false` is not allowed with `next/dynamic` in Server Components. Please move it into a Client Component.


[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/stats/trends" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/stats/trends" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/stats/trends" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/stats/trends" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/stats/trends" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/stats/trends" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/search" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\search\route.ts:45:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/search" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\search\route.ts:45:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
FTS search fallback: Error [PrismaClientKnownRequestError]: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `1`. Message: `near "exists": syntax error`
    at async ensureFtsReady (app\api\search\route.ts:9:39)
    at async GET (app\api\search\route.ts:53:9)
   7 | async function ensureFtsReady() {
   8 |     // Create FTS table and triggers if they do not exist
>  9 |     const [{ exists: tableExists }] = await prisma.$queryRawUnsafe<any[]>(
     |                                       ^
  10 |         "SELECT EXISTS(SELECT 1 FROM sqlite_master WHERE type='table' AND name='message_fts') as exists"
  11 |     )
  12 |     if (!tableExists) { {
  code: 'P2010',
  meta: [Object],
  clientVersion: '6.15.0'
}
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminPage (app\admin\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminPage (app\admin\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminPage (app\admin\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminPage (app\admin\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminModelPage (app\admin\model\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminModelPage (app\admin\model\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/admin/stats/trends" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/stats/trends" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminModelPage (app\admin\model\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminModelPage (app\admin\model\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async PATCH (app\api\chats\[id]\route.ts:14:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async PATCH (app\api\chats\[id]\route.ts:14:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PATCH (app\api\chats\[id]\route.ts:21:23)
  19 | 	}
  20 | 	const updated = await prisma.chat.update({
> 21 | 		where: { id: params.id },
     | 		                    ^
  22 | 		data: { title: title.trim() },
  23 | 	})
  24 | 	return NextResponse.json(updated)
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[Error: aborted] { code: 'ECONNRESET' }
 тип uncaughtException: [Error: aborted] { code: 'ECONNRESET' }
 тип uncaughtException:  [Error: aborted] { code: 'ECONNRESET' }
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]/messages" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\[id]\messages\route.ts:25:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats/[id]/messages" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\[id]\messages\route.ts:25:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:27:65)
  25 | 	const session = await getSessionOrBypass()
  26 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 27 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  28 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  29 |
  30 | 	const { content } = await req.json()
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminPage (app\admin\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminPage (app\admin\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/search" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\search\route.ts:45:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/search" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\search\route.ts:45:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
FTS search fallback: Error [PrismaClientKnownRequestError]: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `1`. Message: `near "exists": syntax error`
    at async ensureFtsReady (app\api\search\route.ts:9:39)
    at async GET (app\api\search\route.ts:53:9)
   7 | async function ensureFtsReady() {
   8 |     // Create FTS table and triggers if they do not exist
>  9 |     const [{ exists: tableExists }] = await prisma.$queryRawUnsafe<any[]>(
     |                                       ^
  10 |         "SELECT EXISTS(SELECT 1 FROM sqlite_master WHERE type='table' AND name='message_fts') as exists"
  11 |     )
  12 |     if (!tableExists) { {
  code: 'P2010',
  meta: [Object],
  clientVersion: '6.15.0'
}
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminModelPage (app\admin\model\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminModelPage (app\admin\model\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminPage (app\admin\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminPage (app\admin\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
 тип [Error: aborted]
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminModelPage (app\admin\model\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminModelPage (app\admin\model\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async PATCH (app\api\chats\[id]\route.ts:14:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async PATCH (app\api\chats\[id]\route.ts:14:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PATCH (app\api\chats\[id]\route.ts:21:23)
  19 | 	}
  20 | 	const updated = await prisma.chat.update({
> 21 | 		where: { id: params.id },
     | 		                    ^
  22 | 		data: { title: title.trim() },
  23 | 	})
  24 | 	return NextResponse.json(updated)
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]/messages" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\[id]\messages\route.ts:25:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats/[id]/messages" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\[id]\messages\route.ts:25:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:27:65)
  25 | 	const session = await getSessionOrBypass()
  26 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 27 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  28 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  29 |
  30 | 	const { content } = await req.json()
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/stats/trends" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/stats/trends" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/stats/trends" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/stats/trends" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/stats/trends" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/stats/trends" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminPage (app\admin\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminPage (app\admin\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminModelPage (app\admin\model\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminModelPage (app\admin\model\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexRedirect (app\chat\page.tsx:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexRedirect (app\chat\page.tsx:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexRedirect (app\chat\page.tsx:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexRedirect (app\chat\page.tsx:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminPage (app\admin\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminPage (app\admin\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/stats/trends" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/stats/trends" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/admin/stats/trends" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/stats/trends" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/search" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\search\route.ts:45:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/search" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\search\route.ts:45:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
FTS search fallback: Error [PrismaClientKnownRequestError]: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `1`. Message: `near "exists": syntax error`
    at async ensureFtsReady (app\api\search\route.ts:9:39)
    at async GET (app\api\search\route.ts:53:9)
   7 | async function ensureFtsReady() {
   8 |     // Create FTS table and triggers if they do not exist
>  9 |     const [{ exists: tableExists }] = await prisma.$queryRawUnsafe<any[]>(
     |                                       ^
  10 |         "SELECT EXISTS(SELECT 1 FROM sqlite_master WHERE type='table' AND name='message_fts') as exists"
  11 |     )
  12 |     if (!tableExists) { {
  code: 'P2010',
  meta: [Object],
  clientVersion: '6.15.0'
}
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminModelPage (app\admin\model\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminModelPage (app\admin\model\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async PATCH (app\api\chats\[id]\route.ts:14:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async PATCH (app\api\chats\[id]\route.ts:14:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PATCH (app\api\chats\[id]\route.ts:21:23)
  19 | 	}
  20 | 	const updated = await prisma.chat.update({
> 21 | 		where: { id: params.id },
     | 		                    ^
  22 | 		data: { title: title.trim() },
  23 | 	})
  24 | 	return NextResponse.json(updated)
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[Error: aborted] { code: 'ECONNRESET' }
 тип uncaughtException: [Error: aborted] { code: 'ECONNRESET' }
 тип uncaughtException:  [Error: aborted] { code: 'ECONNRESET' }
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]/messages" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\[id]\messages\route.ts:25:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats/[id]/messages" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\[id]\messages\route.ts:25:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:27:65)
  25 | 	const session = await getSessionOrBypass()
  26 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 27 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  28 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  29 |
  30 | 	const { content } = await req.json()
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
 тип [TypeError: Failed to parse URL from /api/admin/system] {
  digest: '162561617',
  [cause]: [TypeError: Invalid URL] {
    code: 'ERR_INVALID_URL',
    input: '/api/admin/system'
  }
}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
 тип [TypeError: Failed to parse URL from /api/admin/system] {
  digest: '162561617',
  [cause]: [TypeError: Invalid URL] {
    code: 'ERR_INVALID_URL',
    input: '/api/admin/system'
  }
}
 тип [TypeError: Failed to parse URL from /api/admin/system] {
  digest: '162561617',
  [cause]: [TypeError: Invalid URL] {
    code: 'ERR_INVALID_URL',
    input: '/api/admin/system'
  }
}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
 тЪа Fast Refresh had to perform a full reload due to a runtime error.
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
 тип [TypeError: Failed to parse URL from /api/admin/system] {
  digest: '162561617',
  [cause]: [TypeError: Invalid URL] {
    code: 'ERR_INVALID_URL',
    input: '/api/admin/system'
  }
}
 тип [TypeError: Failed to parse URL from /api/admin/system] {
  digest: '162561617',
  [cause]: [TypeError: Invalid URL] {
    code: 'ERR_INVALID_URL',
    input: '/api/admin/system'
  }
}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
 тип [TypeError: Failed to parse URL from /api/admin/system] {
  digest: '162561617',
  [cause]: [TypeError: Invalid URL] {
    code: 'ERR_INVALID_URL',
    input: '/api/admin/system'
  }
}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
 тип [TypeError: Failed to parse URL from /api/admin/system] {
  digest: '162561617',
  [cause]: [TypeError: Invalid URL] {
    code: 'ERR_INVALID_URL',
    input: '/api/admin/system'
  }
}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
 тип [TypeError: Failed to parse URL from /api/admin/logs?limit=200] {
  digest: '3639951985',
  [cause]: [TypeError: Invalid URL] {
    code: 'ERR_INVALID_URL',
    input: '/api/admin/logs?limit=200'
  }
}
 тип [TypeError: Failed to parse URL from /api/admin/logs?limit=200] {
  digest: '3639951985',
  [cause]: [TypeError: Invalid URL] {
    code: 'ERR_INVALID_URL',
    input: '/api/admin/logs?limit=200'
  }
}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
 тип [TypeError: Failed to parse URL from /api/admin/logs?limit=200] {
  digest: '3639951985',
  [cause]: [TypeError: Invalid URL] {
    code: 'ERR_INVALID_URL',
    input: '/api/admin/logs?limit=200'
  }
}
 тип [TypeError: Failed to parse URL from /api/admin/system] {
  digest: '162561617',
  [cause]: [TypeError: Invalid URL] {
    code: 'ERR_INVALID_URL',
    input: '/api/admin/system'
  }
}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at DELETE (app\api\chats\[id]\route.ts:30:49)
  28 | 	const session = await getSessionOrBypass()
  29 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 30 | 	await prisma.chat.delete({ where: { id: params.id } })
     | 	                                               ^
  31 | 	return NextResponse.json({ ok: true })
  32 | }
  33 |
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at DELETE (app\api\chats\[id]\route.ts:30:49)
  28 | 	const session = await getSessionOrBypass()
  29 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 30 | 	await prisma.chat.delete({ where: { id: params.id } })
     | 	                                               ^
  31 | 	return NextResponse.json({ ok: true })
  32 | }
  33 |
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:28:65)
  26 | 	const session = await getSessionOrBypass()
  27 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 28 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  29 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  30 |
  31 | 	const { content } = await req.json()
 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тип ./app/admin/layout.tsx:3:1
Module not found: Can't resolve './sidebar'
[0m [90m 1 |[39m [36mimport[39m { [33mReactNode[39m } [36mfrom[39m [32m'react'[39m
 [90m 2 |[39m [36mimport[39m { getSessionOrBypass } [36mfrom[39m [32m'@/lib/session'[39m
[31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m [33mSidebar[39m [36mfrom[39m [32m'./sidebar'[39m
 [90m   |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 4 |[39m
 [90m 5 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mAdminLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 6 |[39m     [36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m



https://nextjs.org/docs/messages/module-not-found


 тЪа Fast Refresh had to perform a full reload due to a runtime error.
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
 тип [TypeError: Failed to parse URL from /api/admin/logs?limit=200] {
  digest: '3639951985',
  [cause]: [TypeError: Invalid URL] {
    code: 'ERR_INVALID_URL',
    input: '/api/admin/logs?limit=200'
  }
}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
  12 |     const json = res.ok ? await res.json() : { items: [] }
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
  12 |     const json = res.ok ? await res.json() : { items: [] }
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
  12 |     const json = res.ok ? await res.json() : { items: [] }
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:28:65)
  26 | 	const session = await getSessionOrBypass()
  27 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 28 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  29 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  30 |
  31 | 	const { content } = await req.json()
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
  12 |     const json = res.ok ? await res.json() : { items: [] }
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at formAction (app\admin\model\page.tsx:21:39)
  19 |                     'use server'
  20 |                     const hdrs = headers()
> 21 |                     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                                       ^
  22 |                     const proto = hdrs.get('x-forwarded-proto') || 'http'
  23 |                     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  24 |                     await fetch(`${base}/api/admin/model`, { method: 'POST', body: JSON.stringify({ action: 'pull', model: 'llama3.2-vision' }) })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at formAction (app\admin\model\page.tsx:22:40)
  20 |                     const hdrs = headers()
  21 |                     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
> 22 |                     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                                        ^
  23 |                     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  24 |                     await fetch(`${base}/api/admin/model`, { method: 'POST', body: JSON.stringify({ action: 'pull', model: 'llama3.2-vision' }) })
  25 |                 }} className="rounded bg-blue-600 px-3 py-1">Pull llama3.2-vision</button>
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\admin\model\route.ts:21:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\admin\model\route.ts:21:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
 тип [TypeError: Failed to parse URL from /api/admin/system] {
  digest: '162561617',
  [cause]: [TypeError: Invalid URL] {
    code: 'ERR_INVALID_URL',
    input: '/api/admin/system'
  }
}
 тип [TypeError: Failed to parse URL from /api/admin/system] {
  digest: '162561617',
  [cause]: [TypeError: Invalid URL] {
    code: 'ERR_INVALID_URL',
    input: '/api/admin/system'
  }
}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:28:65)
  26 | 	const session = await getSessionOrBypass()
  27 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 28 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  29 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  30 |
  31 | 	const { content } = await req.json()
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:28:65)
  26 | 	const session = await getSessionOrBypass()
  27 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 28 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  29 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  30 |
  31 | 	const { content } = await req.json()
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at DELETE (app\api\chats\[id]\route.ts:30:49)
  28 | 	const session = await getSessionOrBypass()
  29 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 30 | 	await prisma.chat.delete({ where: { id: params.id } })
     | 	                                               ^
  31 | 	return NextResponse.json({ ok: true })
  32 | }
  33 |
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
  12 |     const json = res.ok ? await res.json() : { items: [] }
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
  12 |     const json = res.ok ? await res.json() : { items: [] }
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
  12 |     const json = res.ok ? await res.json() : { items: [] }
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
  12 |     const json = res.ok ? await res.json() : { items: [] }
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:28:65)
  26 | 	const session = await getSessionOrBypass()
  27 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 28 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  29 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  30 |
  31 | 	const { content } = await req.json()
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:28:65)
  26 | 	const session = await getSessionOrBypass()
  27 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 28 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  29 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  30 |
  31 | 	const { content } = await req.json()
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:28:65)
  26 | 	const session = await getSessionOrBypass()
  27 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 28 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  29 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  30 |
  31 | 	const { content } = await req.json()
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:28:65)
  26 | 	const session = await getSessionOrBypass()
  27 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 28 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  29 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  30 |
  31 | 	const { content } = await req.json()
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:28:65)
  26 | 	const session = await getSessionOrBypass()
  27 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 28 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  29 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  30 |
  31 | 	const { content } = await req.json()
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:16:65)
  14 | 	const session = await getSessionOrBypass()
  15 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 16 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  17 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  18 |
  19 | 	const url = new URL(req.url)
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:23:36)
  21 | 	const limit = Math.min(parseInt(url.searchParams.get('limit') || '30'), 100)
  22 |
> 23 | 	let where: any = { chatId: params.id }
     | 	                                  ^
  24 | 	if (beforeId) {
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (app\api\chats\[id]\messages\route.ts:27:29)
  25 | 		const ref = await prisma.message.findUnique({ where: { id: beforeId } })
  26 | 		if (ref) {
> 27 | 			where = { chatId: params.id, createdAt: { lt: ref.createdAt } }
     | 			                         ^
  28 | 		}
  29 | 	}
  30 |
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
  12 |     const json = res.ok ? await res.json() : { items: [] }
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
  12 |     const json = res.ok ? await res.json() : { items: [] }
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	return <ChatClient chatId={chat.id} chatTitle={chat.title} initialMessages={messages} />
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
  12 |     const json = res.ok ? await res.json() : { items: [] }
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:45:65)
  43 | 	const session = await getSessionOrBypass()
  44 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 45 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  46 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  47 |
  48 | 	const { content } = await req.json()
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:45:65)
  43 | 	const session = await getSessionOrBypass()
  44 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 45 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  46 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  47 |
  48 | 	const { content } = await req.json()
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:45:65)
  43 | 	const session = await getSessionOrBypass()
  44 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 45 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  46 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  47 |
  48 | 	const { content } = await req.json()
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
  12 |     const json = res.ok ? await res.json() : { items: [] }
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
FTS search fallback: Error [PrismaClientKnownRequestError]: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `1`. Message: `near "exists": syntax error`
    at async ensureFtsReady (app\api\search\route.ts:9:39)
    at async GET (app\api\search\route.ts:53:9)
   7 | async function ensureFtsReady() {
   8 |     // Create FTS table and triggers if they do not exist
>  9 |     const [{ exists: tableExists }] = await prisma.$queryRawUnsafe<any[]>(
     |                                       ^
  10 |         "SELECT EXISTS(SELECT 1 FROM sqlite_master WHERE type='table' AND name='message_fts') as exists"
  11 |     )
  12 |     if (!tableExists) { {
  code: 'P2010',
  meta: [Object],
  clientVersion: '6.15.0'
}
FTS search fallback: Error [PrismaClientKnownRequestError]: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `1`. Message: `near "exists": syntax error`
    at async ensureFtsReady (app\api\search\route.ts:9:39)
    at async GET (app\api\search\route.ts:53:9)
   7 | async function ensureFtsReady() {
   8 |     // Create FTS table and triggers if they do not exist
>  9 |     const [{ exists: tableExists }] = await prisma.$queryRawUnsafe<any[]>(
     |                                       ^
  10 |         "SELECT EXISTS(SELECT 1 FROM sqlite_master WHERE type='table' AND name='message_fts') as exists"
  11 |     )
  12 |     if (!tableExists) { {
  code: 'P2010',
  meta: [Object],
  clientVersion: '6.15.0'
}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// Load only the most recent 30 messages first for performance
  12 | 	const lastBatch = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:45:65)
  43 | 	const session = await getSessionOrBypass()
  44 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 45 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  46 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  47 |
  48 | 	const { content } = await req.json()
[Error: failed to pipe response] { [cause]: 'timeout' }
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at DELETE (app\api\chats\[id]\route.ts:30:49)
  28 | 	const session = await getSessionOrBypass()
  29 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 30 | 	await prisma.chat.delete({ where: { id: params.id } })
     | 	                                               ^
  31 | 	return NextResponse.json({ ok: true })
  32 | }
  33 |
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at DELETE (app\api\chats\[id]\route.ts:30:49)
  28 | 	const session = await getSessionOrBypass()
  29 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 30 | 	await prisma.chat.delete({ where: { id: params.id } })
     | 	                                               ^
  31 | 	return NextResponse.json({ ok: true })
  32 | }
  33 |
Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].chat.delete()` invocation in
D:\VSCode\gpt\ai-portal\.next\server\chunks\[root-of-the-server]__8d948455._.js:349:144

  346 }, {
  347     status: 401
  348 });
тЖТ 349 await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].chat.delete(
An operation failed because it depends on one or more records that were required but not found. No record was found for a delete.
    at <unknown> (app\api\chats\[id]\route.ts:30:26)
    at async DELETE (app\api\chats\[id]\route.ts:30:2)
  28 | 	const session = await getSessionOrBypass()
  29 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 30 | 	await prisma.chat.delete({ where: { id: params.id } })
     | 	                        ^
  31 | 	return NextResponse.json({ ok: true })
  32 | }
  33 | {
  code: 'P2025',
  meta: [Object],
  clientVersion: '6.15.0'
}
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at DELETE (app\api\chats\[id]\route.ts:30:49)
  28 | 	const session = await getSessionOrBypass()
  29 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 30 | 	await prisma.chat.delete({ where: { id: params.id } })
     | 	                                               ^
  31 | 	return NextResponse.json({ ok: true })
  32 | }
  33 |
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at DELETE (app\api\chats\[id]\route.ts:30:49)
  28 | 	const session = await getSessionOrBypass()
  29 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 30 | 	await prisma.chat.delete({ where: { id: params.id } })
     | 	                                               ^
  31 | 	return NextResponse.json({ ok: true })
  32 | }
  33 |
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at DELETE (app\api\chats\[id]\route.ts:30:49)
  28 | 	const session = await getSessionOrBypass()
  29 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 30 | 	await prisma.chat.delete({ where: { id: params.id } })
     | 	                                               ^
  31 | 	return NextResponse.json({ ok: true })
  32 | }
  33 |
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:45:65)
  43 | 	const session = await getSessionOrBypass()
  44 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 45 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  46 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  47 |
  48 | 	const { content } = await req.json()
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:45:65)
  43 | 	const session = await getSessionOrBypass()
  44 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 45 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  46 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  47 |
  48 | 	const { content } = await req.json()
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at DELETE (app\api\chats\[id]\route.ts:30:49)
  28 | 	const session = await getSessionOrBypass()
  29 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 30 | 	await prisma.chat.delete({ where: { id: params.id } })
     | 	                                               ^
  31 | 	return NextResponse.json({ ok: true })
  32 | }
  33 |
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:45:65)
  43 | 	const session = await getSessionOrBypass()
  44 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 45 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  46 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  47 |
  48 | 	const { content } = await req.json()
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:45:65)
  43 | 	const session = await getSessionOrBypass()
  44 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 45 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  46 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  47 |
  48 | 	const { content } = await req.json()
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:45:65)
  43 | 	const session = await getSessionOrBypass()
  44 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 45 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  46 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  47 |
  48 | 	const { content } = await req.json()
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:5:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:5:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:5:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:5:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:10:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:5:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:5:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:5:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:5:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
 тип ./app/chat/layout.tsx:9:24
Ecmascript file had an error
[0m [90m  7 |[39m [36mimport[39m [33mShortcutsClient[39m [36mfrom[39m [32m'./shortcutsClient'[39m
 [90m  8 |[39m [36mimport[39m dynamic [36mfrom[39m [32m'next/dynamic'[39m
[31m[1m>[22m[39m[90m  9 |[39m [36mconst[39m [33mUserMenuClient[39m [33m=[39m dynamic(() [33m=>[39m [36mimport[39m([32m'@/app/components/UserMenuClient'[39m)[33m,[39m { ssr[33m:[39m [36mfalse[39m })
 [90m    |[39m                        [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 10 |[39m
 [90m 11 |[39m [36mexport[39m [36mdefault[39m [36masync[39m [36mfunction[39m [33mChatLayout[39m({ children }[33m:[39m { children[33m:[39m [33mReactNode[39m }) {
 [90m 12 |[39m 	[36mconst[39m session [33m=[39m [36mawait[39m getSessionOrBypass()[0m

`ssr: false` is not allowed with `next/dynamic` in Server Components. Please move it into a Client Component.


[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:45:65)
  43 | 	const session = await getSessionOrBypass()
  44 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 45 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  46 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  47 |
  48 | 	const { content } = await req.json()
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╣Ар╕гр╕╡р╕вр╕Зр╕Ир╕▓р╕Бр╣Ар╕Бр╣Ир╕▓р╣Др╕Ыр╣Гр╕лр╕бр╣И р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Др╕гр╕Ър╣Бр╕ер╕░р╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
  12 | 	const messages = await prisma.message.findMany({
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminUsersPage (app\admin\users\page.tsx:16:39)
  14 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
  15 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
> 16 | 	const users = await fetchUsers(base, searchParams?.q || '')
     | 	                                     ^
  17 | 	return (
  18 | 		<div className="p-6 text-white space-y-4">
  19 | 			<h1 className="text-lg font-semibold">Admin тАв Users</h1>
Error: Route "/api/admin/users" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\users\route.ts:8:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/users" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\users\route.ts:8:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminUsersPage (app\admin\users\page.tsx:21:35)
  19 | 			<h1 className="text-lg font-semibold">Admin тАв Users</h1>
  20 | 			<form className="text-sm" action="/admin/users">
> 21 | 				<input name="q" defaultValue={searchParams?.q || ''} placeholder="р╕Др╣Йр╕Щр╕лр╕▓р╕Кр╕╖р╣Ир╕нр╕лр╕гр╕╖р╕нр╕нр╕╡р╣Ар╕бр╕е" className="rounded border border-white/10 bg-transparent px-2 py-1" />
     | 				                              ^
  22 | 				<button className="ml-2 rounded border border-white/10 px-2 py-1 hover:bg-white/10">Search</button>
  23 | 			</form>
  24 | 			<div className="overflow-x-auto rounded border border-white/10">
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |
  12 |     const u = new URL(`${base}/api/admin/logs`)
Error: Route "/admin/logs" used `headers().get('x-search-params')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:13:31)
  11 |
  12 |     const u = new URL(`${base}/api/admin/logs`)
> 13 |     const searchParams = hdrs.get('x-search-params') // not standard; fallback to none
     |                               ^
  14 |     // Pull filters from query forwarded (Next doesn't expose directly; using request URL on server less trivial)
  15 |     // Instead, render empty inputs and client will fetch with filters
  16 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:8:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:8:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:63)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                                                             ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:45:65)
  43 | 	const session = await getSessionOrBypass()
  44 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 45 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  46 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  47 |
  48 | 	const { content } = await req.json()
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminUsersPage (app\admin\users\page.tsx:16:39)
  14 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
  15 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
> 16 | 	const users = await fetchUsers(base, searchParams?.q || '')
     | 	                                     ^
  17 | 	return (
  18 | 		<div className="p-6 text-white space-y-4">
  19 | 			<h1 className="text-lg font-semibold">Admin тАв Users</h1>
Error: Route "/api/admin/users" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\users\route.ts:8:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/users" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\users\route.ts:8:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminUsersPage (app\admin\users\page.tsx:21:35)
  19 | 			<h1 className="text-lg font-semibold">Admin тАв Users</h1>
  20 | 			<form className="text-sm" action="/admin/users">
> 21 | 				<input name="q" defaultValue={searchParams?.q || ''} placeholder="р╕Др╣Йр╕Щр╕лр╕▓р╕Кр╕╖р╣Ир╕нр╕лр╕гр╕╖р╕нр╕нр╕╡р╣Ар╕бр╕е" className="rounded border border-white/10 bg-transparent px-2 py-1" />
     | 				                              ^
  22 | 				<button className="ml-2 rounded border border-white/10 px-2 py-1 hover:bg-white/10">Search</button>
  23 | 			</form>
  24 | 			<div className="overflow-x-auto rounded border border-white/10">
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |
  12 |     const u = new URL(`${base}/api/admin/logs`)
Error: Route "/admin/logs" used `headers().get('x-search-params')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:13:31)
  11 |
  12 |     const u = new URL(`${base}/api/admin/logs`)
> 13 |     const searchParams = hdrs.get('x-search-params') // not standard; fallback to none
     |                               ^
  14 |     // Pull filters from query forwarded (Next doesn't expose directly; using request URL on server less trivial)
  15 |     // Instead, render empty inputs and client will fetch with filters
  16 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:8:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:8:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminUsersPage (app\admin\users\page.tsx:16:39)
  14 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
  15 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
> 16 | 	const users = await fetchUsers(base, searchParams?.q || '')
     | 	                                     ^
  17 | 	return (
  18 | 		<div className="p-6 text-white space-y-4">
  19 | 			<h1 className="text-lg font-semibold">Admin тАв Users</h1>
Error: Route "/api/admin/users" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\users\route.ts:8:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/users" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\users\route.ts:8:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminUsersPage (app\admin\users\page.tsx:21:35)
  19 | 			<h1 className="text-lg font-semibold">Admin тАв Users</h1>
  20 | 			<form className="text-sm" action="/admin/users">
> 21 | 				<input name="q" defaultValue={searchParams?.q || ''} placeholder="р╕Др╣Йр╕Щр╕лр╕▓р╕Кр╕╖р╣Ир╕нр╕лр╕гр╕╖р╕нр╕нр╕╡р╣Ар╕бр╕е" className="rounded border border-white/10 bg-transparent px-2 py-1" />
     | 				                              ^
  22 | 				<button className="ml-2 rounded border border-white/10 px-2 py-1 hover:bg-white/10">Search</button>
  23 | 			</form>
  24 | 			<div className="overflow-x-auto rounded border border-white/10">
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |
  12 |     const u = new URL(`${base}/api/admin/logs`)
Error: Route "/admin/logs" used `headers().get('x-search-params')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:13:31)
  11 |
  12 |     const u = new URL(`${base}/api/admin/logs`)
> 13 |     const searchParams = hdrs.get('x-search-params') // not standard; fallback to none
     |                               ^
  14 |     // Pull filters from query forwarded (Next doesn't expose directly; using request URL on server less trivial)
  15 |     // Instead, render empty inputs and client will fetch with filters
  16 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:8:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:8:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:46:65)
  44 | 	const session = await getSessionOrBypass()
  45 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 46 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  47 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  48 |
  49 | 	const { content } = await req.json()
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminUsersPage (app\admin\users\page.tsx:16:39)
  14 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
  15 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
> 16 | 	const users = await fetchUsers(base, searchParams?.q || '')
     | 	                                     ^
  17 | 	return (
  18 | 		<div className="p-6 text-white space-y-4">
  19 | 			<h1 className="text-lg font-semibold">Admin тАв Users</h1>
Error: Route "/api/admin/users" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\users\route.ts:8:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/users" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\users\route.ts:8:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminUsersPage (app\admin\users\page.tsx:21:35)
  19 | 			<h1 className="text-lg font-semibold">Admin тАв Users</h1>
  20 | 			<form className="text-sm" action="/admin/users">
> 21 | 				<input name="q" defaultValue={searchParams?.q || ''} placeholder="р╕Др╣Йр╕Щр╕лр╕▓р╕Кр╕╖р╣Ир╕нр╕лр╕гр╕╖р╕нр╕нр╕╡р╣Ар╕бр╕е" className="rounded border border-white/10 bg-transparent px-2 py-1" />
     | 				                              ^
  22 | 				<button className="ml-2 rounded border border-white/10 px-2 py-1 hover:bg-white/10">Search</button>
  23 | 			</form>
  24 | 			<div className="overflow-x-auto rounded border border-white/10">
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at formAction (app\admin\model\page.tsx:21:39)
  19 |                     'use server'
  20 |                     const hdrs = headers()
> 21 |                     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                                       ^
  22 |                     const proto = hdrs.get('x-forwarded-proto') || 'http'
  23 |                     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  24 |                     await fetch(`${base}/api/admin/model`, { method: 'POST', body: JSON.stringify({ action: 'pull', model: 'llama3.2-vision' }) })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at formAction (app\admin\model\page.tsx:22:40)
  20 |                     const hdrs = headers()
  21 |                     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
> 22 |                     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                                        ^
  23 |                     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  24 |                     await fetch(`${base}/api/admin/model`, { method: 'POST', body: JSON.stringify({ action: 'pull', model: 'llama3.2-vision' }) })
  25 |                 }} className="rounded bg-blue-600 px-3 py-1">Pull llama3.2-vision</button>
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\admin\model\route.ts:21:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\admin\model\route.ts:21:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at formAction (app\admin\model\page.tsx:21:39)
  19 |                     'use server'
  20 |                     const hdrs = headers()
> 21 |                     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                                       ^
  22 |                     const proto = hdrs.get('x-forwarded-proto') || 'http'
  23 |                     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  24 |                     await fetch(`${base}/api/admin/model`, { method: 'POST', body: JSON.stringify({ action: 'pull', model: 'llama3.2-vision' }) })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at formAction (app\admin\model\page.tsx:22:40)
  20 |                     const hdrs = headers()
  21 |                     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
> 22 |                     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                                        ^
  23 |                     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  24 |                     await fetch(`${base}/api/admin/model`, { method: 'POST', body: JSON.stringify({ action: 'pull', model: 'llama3.2-vision' }) })
  25 |                 }} className="rounded bg-blue-600 px-3 py-1">Pull llama3.2-vision</button>
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\admin\model\route.ts:21:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\admin\model\route.ts:21:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at formAction (app\admin\model\page.tsx:21:39)
  19 |                     'use server'
  20 |                     const hdrs = headers()
> 21 |                     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                                       ^
  22 |                     const proto = hdrs.get('x-forwarded-proto') || 'http'
  23 |                     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  24 |                     await fetch(`${base}/api/admin/model`, { method: 'POST', body: JSON.stringify({ action: 'pull', model: 'llama3.2-vision' }) })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at formAction (app\admin\model\page.tsx:22:40)
  20 |                     const hdrs = headers()
  21 |                     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
> 22 |                     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                                        ^
  23 |                     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  24 |                     await fetch(`${base}/api/admin/model`, { method: 'POST', body: JSON.stringify({ action: 'pull', model: 'llama3.2-vision' }) })
  25 |                 }} className="rounded bg-blue-600 px-3 py-1">Pull llama3.2-vision</button>
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\admin\model\route.ts:21:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\admin\model\route.ts:21:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at formAction (app\admin\model\page.tsx:21:39)
  19 |                     'use server'
  20 |                     const hdrs = headers()
> 21 |                     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                                       ^
  22 |                     const proto = hdrs.get('x-forwarded-proto') || 'http'
  23 |                     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  24 |                     await fetch(`${base}/api/admin/model`, { method: 'POST', body: JSON.stringify({ action: 'pull', model: 'llama3.2-vision' }) })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at formAction (app\admin\model\page.tsx:22:40)
  20 |                     const hdrs = headers()
  21 |                     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
> 22 |                     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                                        ^
  23 |                     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  24 |                     await fetch(`${base}/api/admin/model`, { method: 'POST', body: JSON.stringify({ action: 'pull', model: 'llama3.2-vision' }) })
  25 |                 }} className="rounded bg-blue-600 px-3 py-1">Pull llama3.2-vision</button>
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\admin\model\route.ts:21:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\admin\model\route.ts:21:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\admin\model\route.ts:21:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\admin\model\route.ts:21:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |
  12 |     const u = new URL(`${base}/api/admin/logs`)
Error: Route "/admin/logs" used `headers().get('x-search-params')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:13:31)
  11 |
  12 |     const u = new URL(`${base}/api/admin/logs`)
> 13 |     const searchParams = hdrs.get('x-search-params') // not standard; fallback to none
     |                               ^
  14 |     // Pull filters from query forwarded (Next doesn't expose directly; using request URL on server less trivial)
  15 |     // Instead, render empty inputs and client will fetch with filters
  16 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:8:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:8:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:7:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:7:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\admin\model\route.ts:27:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\admin\model\route.ts:27:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/model`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:20)
   6 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 | 	const hdrs = headers()
>  8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     | 	                  ^
   9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:21)
   7 | 	const hdrs = headers()
   8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
     | 	                   ^
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
  12 | 	if (process.env.NODE_ENV !== 'production') (extraHeaders as any)['x-test-bypass'] = '1'
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\admin\model\route.ts:27:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\admin\model\route.ts:27:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:20)
   6 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 | 	const hdrs = headers()
>  8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     | 	                  ^
   9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:21)
   7 | 	const hdrs = headers()
   8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
     | 	                   ^
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
  12 | 	if (process.env.NODE_ENV !== 'production') (extraHeaders as any)['x-test-bypass'] = '1'
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:20)
   6 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 | 	const hdrs = headers()
>  8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     | 	                  ^
   9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:21)
   7 | 	const hdrs = headers()
   8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
     | 	                   ^
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
  12 | 	if (process.env.NODE_ENV !== 'production') (extraHeaders as any)['x-test-bypass'] = '1'
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:20)
   6 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 | 	const hdrs = headers()
>  8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     | 	                  ^
   9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:21)
   7 | 	const hdrs = headers()
   8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
     | 	                   ^
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
  12 | 	if (process.env.NODE_ENV !== 'production') (extraHeaders as any)['x-test-bypass'] = '1'
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:5:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:5:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminHome (app\admin\page.tsx:5:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminHome (app\admin\page.tsx:5:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/users" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminUsersPage (app\admin\users\page.tsx:16:39)
  14 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
  15 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
> 16 | 	const users = await fetchUsers(base, searchParams?.q || '')
     | 	                                     ^
  17 | 	return (
  18 | 		<div className="p-6 text-white space-y-4">
  19 | 			<h1 className="text-lg font-semibold">Admin тАв Users</h1>
Error: Route "/api/admin/users" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\users\route.ts:8:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/users" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\users\route.ts:8:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminUsersPage (app\admin\users\page.tsx:21:35)
  19 | 			<h1 className="text-lg font-semibold">Admin тАв Users</h1>
  20 | 			<form className="text-sm" action="/admin/users">
> 21 | 				<input name="q" defaultValue={searchParams?.q || ''} placeholder="р╕Др╣Йр╕Щр╕лр╕▓р╕Кр╕╖р╣Ир╕нр╕лр╕гр╕╖р╕нр╕нр╕╡р╣Ар╕бр╕е" className="rounded border border-white/10 bg-transparent px-2 py-1" />
     | 				                              ^
  22 | 				<button className="ml-2 rounded border border-white/10 px-2 py-1 hover:bg-white/10">Search</button>
  23 | 			</form>
  24 | 			<div className="overflow-x-auto rounded border border-white/10">
Error: Route "/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |
  12 |     const u = new URL(`${base}/api/admin/logs`)
Error: Route "/admin/logs" used `headers().get('x-search-params')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:13:31)
  11 |
  12 |     const u = new URL(`${base}/api/admin/logs`)
> 13 |     const searchParams = hdrs.get('x-search-params') // not standard; fallback to none
     |                               ^
  14 |     // Pull filters from query forwarded (Next doesn't expose directly; using request URL on server less trivial)
  15 |     // Instead, render empty inputs and client will fetch with filters
  16 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:8:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:8:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/settings" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/settings" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/settings" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\settings\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/settings" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\settings\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminSystemPage (app\admin\system\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminSystemPage (app\admin\system\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/stats/trends" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/stats/trends" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:20)
   6 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 | 	const hdrs = headers()
>  8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     | 	                  ^
   9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:21)
   7 | 	const hdrs = headers()
   8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
     | 	                   ^
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
  12 | 	if (process.env.NODE_ENV !== 'production') (extraHeaders as any)['x-test-bypass'] = '1'
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminHome (app\admin\page.tsx:5:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminHome (app\admin\page.tsx:5:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:46:65)
  44 | 	const session = await getSessionOrBypass()
  45 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 46 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  47 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  48 |
  49 | 	const { content } = await req.json()
Error: Route "/admin/users" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/users" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminUsersPage (app\admin\users\page.tsx:16:39)
  14 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
  15 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
> 16 | 	const users = await fetchUsers(base, searchParams?.q || '')
     | 	                                     ^
  17 | 	return (
  18 | 		<div className="p-6 text-white space-y-4">
  19 | 			<h1 className="text-lg font-semibold">Admin тАв Users</h1>
Error: Route "/api/admin/users" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\users\route.ts:8:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/users" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\users\route.ts:8:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminUsersPage (app\admin\users\page.tsx:21:35)
  19 | 			<h1 className="text-lg font-semibold">Admin тАв Users</h1>
  20 | 			<form className="text-sm" action="/admin/users">
> 21 | 				<input name="q" defaultValue={searchParams?.q || ''} placeholder="р╕Др╣Йр╕Щр╕лр╕▓р╕Кр╕╖р╣Ир╕нр╕лр╕гр╕╖р╕нр╕нр╕╡р╣Ар╕бр╕е" className="rounded border border-white/10 bg-transparent px-2 py-1" />
     | 				                              ^
  22 | 				<button className="ml-2 rounded border border-white/10 px-2 py-1 hover:bg-white/10">Search</button>
  23 | 			</form>
  24 | 			<div className="overflow-x-auto rounded border border-white/10">
Error: Route "/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |
  12 |     const u = new URL(`${base}/api/admin/logs`)
Error: Route "/admin/logs" used `headers().get('x-search-params')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:13:31)
  11 |
  12 |     const u = new URL(`${base}/api/admin/logs`)
> 13 |     const searchParams = hdrs.get('x-search-params') // not standard; fallback to none
     |                               ^
  14 |     // Pull filters from query forwarded (Next doesn't expose directly; using request URL on server less trivial)
  15 |     // Instead, render empty inputs and client will fetch with filters
  16 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:8:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:8:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/settings" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/settings" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/settings" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\settings\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/settings" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\settings\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/stats/trends" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/stats/trends" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:20)
   6 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 | 	const hdrs = headers()
>  8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     | 	                  ^
   9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:21)
   7 | 	const hdrs = headers()
   8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
     | 	                   ^
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
  12 | 	if (process.env.NODE_ENV !== 'production') (extraHeaders as any)['x-test-bypass'] = '1'
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
 тип ./app/(auth)/reset/page.tsx:5:14
Ecmascript file had an error
[0m [90m 3 |[39m [36mimport[39m { useRouter } [36mfrom[39m [32m'next/navigation'[39m
 [90m 4 |[39m
[31m[1m>[22m[39m[90m 5 |[39m [36mexport[39m [36mconst[39m metadata [33m=[39m { title[33m:[39m [32m'р╕ер╕╖р╕бр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ тАв AI Portal'[39m }
 [90m   |[39m              [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 6 |[39m
 [90m 7 |[39m [36mexport[39m [36mdefault[39m [36mfunction[39m [33mResetPage[39m(){
 [90m 8 |[39m 	[36mconst[39m [email[33m,[39m setEmail] [33m=[39m useState([32m''[39m)[0m

You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client



Import traces:
  Client Component Browser:
    ./app/(auth)/reset/page.tsx [Client Component Browser]
    ./app/(auth)/reset/page.tsx [Server Component]

  Client Component SSR:
    ./app/(auth)/reset/page.tsx [Client Component SSR]
    ./app/(auth)/reset/page.tsx [Server Component]


 тип ./app/(auth)/register/page.tsx:4:14
Ecmascript file had an error
[0m [90m 2 |[39m [36mimport[39m { useState } [36mfrom[39m [32m'react'[39m
 [90m 3 |[39m
[31m[1m>[22m[39m[90m 4 |[39m [36mexport[39m [36mconst[39m metadata [33m=[39m { title[33m:[39m [32m'р╕кр╕бр╕▒р╕Др╕гр╕кр╕бр╕▓р╕Кр╕┤р╕Б тАв AI Portal'[39m }
 [90m   |[39m              [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 5 |[39m
 [90m 6 |[39m [36mexport[39m [36mdefault[39m [36mfunction[39m [33mRegisterPage[39m(){
 [90m 7 |[39m 	[36mconst[39m [email[33m,[39m setEmail] [33m=[39m useState([32m''[39m)[0m

You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client



Import traces:
  Client Component Browser:
    ./app/(auth)/register/page.tsx [Client Component Browser]
    ./app/(auth)/register/page.tsx [Server Component]

  Client Component SSR:
    ./app/(auth)/register/page.tsx [Client Component SSR]
    ./app/(auth)/register/page.tsx [Server Component]


Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
 тип ./app/settings/page.tsx:4:14
Ecmascript file had an error
[0m [90m 2 |[39m [36mimport[39m { useEffect[33m,[39m useState } [36mfrom[39m [32m'react'[39m
 [90m 3 |[39m
[31m[1m>[22m[39m[90m 4 |[39m [36mexport[39m [36mconst[39m metadata [33m=[39m { title[33m:[39m [32m'Settings тАв AI Portal'[39m }
 [90m   |[39m              [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 5 |[39m
 [90m 6 |[39m [36mexport[39m [36mdefault[39m [36mfunction[39m [33mSettingsPage[39m(){
 [90m 7 |[39m 	[36mconst[39m [theme[33m,[39m setTheme] [33m=[39m useState[33m<[39m[32m'light'[39m[33m|[39m[32m'dark'[39m[33m>[39m(() [33m=>[39m ([36mtypeof[39m window [33m!==[39m [32m'undefined'[39m [33m?[39m ((localStorage[33m.[39mgetItem([32m'theme'[39m) [36mas[39m any) [33m||[39m [32m'dark'[39m) [33m:[39m [32m'dark'[39m))[0m

You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client



Import traces:
  Client Component Browser:
    ./app/settings/page.tsx [Client Component Browser]
    ./app/settings/page.tsx [Server Component]

  Client Component SSR:
    ./app/settings/page.tsx [Client Component SSR]
    ./app/settings/page.tsx [Server Component]


Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminUsersPage (app\admin\users\page.tsx:13:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/users" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminUsersPage (app\admin\users\page.tsx:13:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminUsersPage (app\admin\users\page.tsx:16:39)
  14 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
  15 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
> 16 | 	const users = await fetchUsers(base, searchParams?.q || '')
     | 	                                     ^
  17 | 	return (
  18 | 		<div className="p-6 text-white space-y-4">
  19 | 			<h1 className="text-lg font-semibold">Admin тАв Users</h1>
Error: Route "/admin/users" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminUsersPage (app\admin\users\page.tsx:21:35)
  19 | 			<h1 className="text-lg font-semibold">Admin тАв Users</h1>
  20 | 			<form className="text-sm" action="/admin/users">
> 21 | 				<input name="q" defaultValue={searchParams?.q || ''} placeholder="р╕Др╣Йр╕Щр╕лр╕▓р╕Кр╕╖р╣Ир╕нр╕лр╕гр╕╖р╕нр╕нр╕╡р╣Ар╕бр╕е" className="rounded border border-white/10 bg-transparent px-2 py-1" />
     | 				                              ^
  22 | 				<button className="ml-2 rounded border border-white/10 px-2 py-1 hover:bg-white/10">Search</button>
  23 | 			</form>
  24 | 			<div className="overflow-x-auto rounded border border-white/10">
Error: Route "/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLogsPage (app\admin\logs\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLogsPage (app\admin\logs\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |
  12 |     const u = new URL(`${base}/api/admin/logs`)
Error: Route "/admin/logs" used `headers().get('x-search-params')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:13:31)
  11 |
  12 |     const u = new URL(`${base}/api/admin/logs`)
> 13 |     const searchParams = hdrs.get('x-search-params') // not standard; fallback to none
     |                               ^
  14 |     // Pull filters from query forwarded (Next doesn't expose directly; using request URL on server less trivial)
  15 |     // Instead, render empty inputs and client will fetch with filters
  16 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/admin/settings" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/settings" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:20)
   6 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 | 	const hdrs = headers()
>  8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     | 	                  ^
   9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:21)
   7 | 	const hdrs = headers()
   8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
     | 	                   ^
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
  12 | 	if (process.env.NODE_ENV !== 'production') (extraHeaders as any)['x-test-bypass'] = '1'
 тип ./app/(auth)/reset/page.tsx:5:14
Ecmascript file had an error
[0m [90m 3 |[39m [36mimport[39m { useRouter } [36mfrom[39m [32m'next/navigation'[39m
 [90m 4 |[39m
[31m[1m>[22m[39m[90m 5 |[39m [36mexport[39m [36mconst[39m metadata [33m=[39m { title[33m:[39m [32m'р╕ер╕╖р╕бр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ тАв AI Portal'[39m }
 [90m   |[39m              [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 6 |[39m
 [90m 7 |[39m [36mexport[39m [36mdefault[39m [36mfunction[39m [33mResetPage[39m(){
 [90m 8 |[39m 	[36mconst[39m [email[33m,[39m setEmail] [33m=[39m useState([32m''[39m)[0m

You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client



Import traces:
  Client Component Browser:
    ./app/(auth)/reset/page.tsx [Client Component Browser]
    ./app/(auth)/reset/page.tsx [Server Component]

  Client Component SSR:
    ./app/(auth)/reset/page.tsx [Client Component SSR]
    ./app/(auth)/reset/page.tsx [Server Component]


 тип ./app/(auth)/register/page.tsx:4:14
Ecmascript file had an error
[0m [90m 2 |[39m [36mimport[39m { useState } [36mfrom[39m [32m'react'[39m
 [90m 3 |[39m
[31m[1m>[22m[39m[90m 4 |[39m [36mexport[39m [36mconst[39m metadata [33m=[39m { title[33m:[39m [32m'р╕кр╕бр╕▒р╕Др╕гр╕кр╕бр╕▓р╕Кр╕┤р╕Б тАв AI Portal'[39m }
 [90m   |[39m              [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 5 |[39m
 [90m 6 |[39m [36mexport[39m [36mdefault[39m [36mfunction[39m [33mRegisterPage[39m(){
 [90m 7 |[39m 	[36mconst[39m [email[33m,[39m setEmail] [33m=[39m useState([32m''[39m)[0m

You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client



Import traces:
  Client Component Browser:
    ./app/(auth)/register/page.tsx [Client Component Browser]
    ./app/(auth)/register/page.tsx [Server Component]

  Client Component SSR:
    ./app/(auth)/register/page.tsx [Client Component SSR]
    ./app/(auth)/register/page.tsx [Server Component]


Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
 тип ./app/settings/page.tsx:4:14
Ecmascript file had an error
[0m [90m 2 |[39m [36mimport[39m { useEffect[33m,[39m useState } [36mfrom[39m [32m'react'[39m
 [90m 3 |[39m
[31m[1m>[22m[39m[90m 4 |[39m [36mexport[39m [36mconst[39m metadata [33m=[39m { title[33m:[39m [32m'Settings тАв AI Portal'[39m }
 [90m   |[39m              [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 5 |[39m
 [90m 6 |[39m [36mexport[39m [36mdefault[39m [36mfunction[39m [33mSettingsPage[39m(){
 [90m 7 |[39m 	[36mconst[39m [theme[33m,[39m setTheme] [33m=[39m useState[33m<[39m[32m'light'[39m[33m|[39m[32m'dark'[39m[33m>[39m(() [33m=>[39m ([36mtypeof[39m window [33m!==[39m [32m'undefined'[39m [33m?[39m ((localStorage[33m.[39mgetItem([32m'theme'[39m) [36mas[39m any) [33m||[39m [32m'dark'[39m) [33m:[39m [32m'dark'[39m))[0m

You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client



Import traces:
  Client Component Browser:
    ./app/settings/page.tsx [Client Component Browser]
    ./app/settings/page.tsx [Server Component]

  Client Component SSR:
    ./app/settings/page.tsx [Client Component SSR]
    ./app/settings/page.tsx [Server Component]


Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminHome (app\admin\page.tsx:5:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminHome (app\admin\page.tsx:5:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminUsersPage (app\admin\users\page.tsx:13:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/users" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminUsersPage (app\admin\users\page.tsx:13:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminUsersPage (app\admin\users\page.tsx:16:39)
  14 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
  15 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
> 16 | 	const users = await fetchUsers(base, searchParams?.q || '')
     | 	                                     ^
  17 | 	return (
  18 | 		<div className="p-6 text-white space-y-4">
  19 | 			<h1 className="text-lg font-semibold">Admin тАв Users</h1>
Error: Route "/admin/users" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminUsersPage (app\admin\users\page.tsx:21:35)
  19 | 			<h1 className="text-lg font-semibold">Admin тАв Users</h1>
  20 | 			<form className="text-sm" action="/admin/users">
> 21 | 				<input name="q" defaultValue={searchParams?.q || ''} placeholder="р╕Др╣Йр╕Щр╕лр╕▓р╕Кр╕╖р╣Ир╕нр╕лр╕гр╕╖р╕нр╕нр╕╡р╣Ар╕бр╕е" className="rounded border border-white/10 bg-transparent px-2 py-1" />
     | 				                              ^
  22 | 				<button className="ml-2 rounded border border-white/10 px-2 py-1 hover:bg-white/10">Search</button>
  23 | 			</form>
  24 | 			<div className="overflow-x-auto rounded border border-white/10">
Error: Route "/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLogsPage (app\admin\logs\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLogsPage (app\admin\logs\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |
  12 |     const u = new URL(`${base}/api/admin/logs`)
Error: Route "/admin/logs" used `headers().get('x-search-params')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:13:31)
  11 |
  12 |     const u = new URL(`${base}/api/admin/logs`)
> 13 |     const searchParams = hdrs.get('x-search-params') // not standard; fallback to none
     |                               ^
  14 |     // Pull filters from query forwarded (Next doesn't expose directly; using request URL on server less trivial)
  15 |     // Instead, render empty inputs and client will fetch with filters
  16 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/admin/settings" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/settings" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:20)
   6 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 | 	const hdrs = headers()
>  8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     | 	                  ^
   9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:21)
   7 | 	const hdrs = headers()
   8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
     | 	                   ^
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
  12 | 	if (process.env.NODE_ENV !== 'production') (extraHeaders as any)['x-test-bypass'] = '1'
 тип ./app/(auth)/reset/page.tsx:5:14
Ecmascript file had an error
[0m [90m 3 |[39m [36mimport[39m { useRouter } [36mfrom[39m [32m'next/navigation'[39m
 [90m 4 |[39m
[31m[1m>[22m[39m[90m 5 |[39m [36mexport[39m [36mconst[39m metadata [33m=[39m { title[33m:[39m [32m'р╕ер╕╖р╕бр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ тАв AI Portal'[39m }
 [90m   |[39m              [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 6 |[39m
 [90m 7 |[39m [36mexport[39m [36mdefault[39m [36mfunction[39m [33mResetPage[39m(){
 [90m 8 |[39m 	[36mconst[39m [email[33m,[39m setEmail] [33m=[39m useState([32m''[39m)[0m

You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client



Import traces:
  Client Component Browser:
    ./app/(auth)/reset/page.tsx [Client Component Browser]
    ./app/(auth)/reset/page.tsx [Server Component]

  Client Component SSR:
    ./app/(auth)/reset/page.tsx [Client Component SSR]
    ./app/(auth)/reset/page.tsx [Server Component]


 тип ./app/(auth)/register/page.tsx:4:14
Ecmascript file had an error
[0m [90m 2 |[39m [36mimport[39m { useState } [36mfrom[39m [32m'react'[39m
 [90m 3 |[39m
[31m[1m>[22m[39m[90m 4 |[39m [36mexport[39m [36mconst[39m metadata [33m=[39m { title[33m:[39m [32m'р╕кр╕бр╕▒р╕Др╕гр╕кр╕бр╕▓р╕Кр╕┤р╕Б тАв AI Portal'[39m }
 [90m   |[39m              [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 5 |[39m
 [90m 6 |[39m [36mexport[39m [36mdefault[39m [36mfunction[39m [33mRegisterPage[39m(){
 [90m 7 |[39m 	[36mconst[39m [email[33m,[39m setEmail] [33m=[39m useState([32m''[39m)[0m

You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client



Import traces:
  Client Component Browser:
    ./app/(auth)/register/page.tsx [Client Component Browser]
    ./app/(auth)/register/page.tsx [Server Component]

  Client Component SSR:
    ./app/(auth)/register/page.tsx [Client Component SSR]
    ./app/(auth)/register/page.tsx [Server Component]


Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
 тип ./app/settings/page.tsx:4:14
Ecmascript file had an error
[0m [90m 2 |[39m [36mimport[39m { useEffect[33m,[39m useState } [36mfrom[39m [32m'react'[39m
 [90m 3 |[39m
[31m[1m>[22m[39m[90m 4 |[39m [36mexport[39m [36mconst[39m metadata [33m=[39m { title[33m:[39m [32m'Settings тАв AI Portal'[39m }
 [90m   |[39m              [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 5 |[39m
 [90m 6 |[39m [36mexport[39m [36mdefault[39m [36mfunction[39m [33mSettingsPage[39m(){
 [90m 7 |[39m 	[36mconst[39m [theme[33m,[39m setTheme] [33m=[39m useState[33m<[39m[32m'light'[39m[33m|[39m[32m'dark'[39m[33m>[39m(() [33m=>[39m ([36mtypeof[39m window [33m!==[39m [32m'undefined'[39m [33m?[39m ((localStorage[33m.[39mgetItem([32m'theme'[39m) [36mas[39m any) [33m||[39m [32m'dark'[39m) [33m:[39m [32m'dark'[39m))[0m

You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client



Import traces:
  Client Component Browser:
    ./app/settings/page.tsx [Client Component Browser]
    ./app/settings/page.tsx [Server Component]

  Client Component SSR:
    ./app/settings/page.tsx [Client Component SSR]
    ./app/settings/page.tsx [Server Component]


Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminHome (app\admin\page.tsx:5:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminHome (app\admin\page.tsx:5:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/users" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminUsersPage (app\admin\users\page.tsx:16:39)
  14 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
  15 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
> 16 | 	const users = await fetchUsers(base, searchParams?.q || '')
     | 	                                     ^
  17 | 	return (
  18 | 		<div className="p-6 text-white space-y-4">
  19 | 			<h1 className="text-lg font-semibold">Admin тАв Users</h1>
Error: Route "/admin/users" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminUsersPage (app\admin\users\page.tsx:21:35)
  19 | 			<h1 className="text-lg font-semibold">Admin тАв Users</h1>
  20 | 			<form className="text-sm" action="/admin/users">
> 21 | 				<input name="q" defaultValue={searchParams?.q || ''} placeholder="р╕Др╣Йр╕Щр╕лр╕▓р╕Кр╕╖р╣Ир╕нр╕лр╕гр╕╖р╕нр╕нр╕╡р╣Ар╕бр╕е" className="rounded border border-white/10 bg-transparent px-2 py-1" />
     | 				                              ^
  22 | 				<button className="ml-2 rounded border border-white/10 px-2 py-1 hover:bg-white/10">Search</button>
  23 | 			</form>
  24 | 			<div className="overflow-x-auto rounded border border-white/10">
Error: Route "/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/logs" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |
Error: Route "/admin/logs" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |
  12 |     const u = new URL(`${base}/api/admin/logs`)
Error: Route "/admin/logs" used `headers().get('x-search-params')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminLogsPage (app\admin\logs\page.tsx:13:31)
  11 |
  12 |     const u = new URL(`${base}/api/admin/logs`)
> 13 |     const searchParams = hdrs.get('x-search-params') // not standard; fallback to none
     |                               ^
  14 |     // Pull filters from query forwarded (Next doesn't expose directly; using request URL on server less trivial)
  15 |     // Instead, render empty inputs and client will fetch with filters
  16 |     const res = await fetch(`${base}/api/admin/logs?limit=200`, { cache: 'no-store' })
Error: Route "/admin/settings" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/settings" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:20)
   6 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 | 	const hdrs = headers()
>  8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     | 	                  ^
   9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:21)
   7 | 	const hdrs = headers()
   8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
     | 	                   ^
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
  12 | 	if (process.env.NODE_ENV !== 'production') (extraHeaders as any)['x-test-bypass'] = '1'
 тип ./app/(auth)/reset/page.tsx:5:14
Ecmascript file had an error
[0m [90m 3 |[39m [36mimport[39m { useRouter } [36mfrom[39m [32m'next/navigation'[39m
 [90m 4 |[39m
[31m[1m>[22m[39m[90m 5 |[39m [36mexport[39m [36mconst[39m metadata [33m=[39m { title[33m:[39m [32m'р╕ер╕╖р╕бр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ тАв AI Portal'[39m }
 [90m   |[39m              [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 6 |[39m
 [90m 7 |[39m [36mexport[39m [36mdefault[39m [36mfunction[39m [33mResetPage[39m(){
 [90m 8 |[39m 	[36mconst[39m [email[33m,[39m setEmail] [33m=[39m useState([32m''[39m)[0m

You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client



Import traces:
  Client Component Browser:
    ./app/(auth)/reset/page.tsx [Client Component Browser]
    ./app/(auth)/reset/page.tsx [Server Component]

  Client Component SSR:
    ./app/(auth)/reset/page.tsx [Client Component SSR]
    ./app/(auth)/reset/page.tsx [Server Component]


 тип ./app/(auth)/register/page.tsx:4:14
Ecmascript file had an error
[0m [90m 2 |[39m [36mimport[39m { useState } [36mfrom[39m [32m'react'[39m
 [90m 3 |[39m
[31m[1m>[22m[39m[90m 4 |[39m [36mexport[39m [36mconst[39m metadata [33m=[39m { title[33m:[39m [32m'р╕кр╕бр╕▒р╕Др╕гр╕кр╕бр╕▓р╕Кр╕┤р╕Б тАв AI Portal'[39m }
 [90m   |[39m              [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 5 |[39m
 [90m 6 |[39m [36mexport[39m [36mdefault[39m [36mfunction[39m [33mRegisterPage[39m(){
 [90m 7 |[39m 	[36mconst[39m [email[33m,[39m setEmail] [33m=[39m useState([32m''[39m)[0m

You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client



Import traces:
  Client Component Browser:
    ./app/(auth)/register/page.tsx [Client Component Browser]
    ./app/(auth)/register/page.tsx [Server Component]

  Client Component SSR:
    ./app/(auth)/register/page.tsx [Client Component SSR]
    ./app/(auth)/register/page.tsx [Server Component]


Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
 тип ./app/settings/page.tsx:4:14
Ecmascript file had an error
[0m [90m 2 |[39m [36mimport[39m { useEffect[33m,[39m useState } [36mfrom[39m [32m'react'[39m
 [90m 3 |[39m
[31m[1m>[22m[39m[90m 4 |[39m [36mexport[39m [36mconst[39m metadata [33m=[39m { title[33m:[39m [32m'Settings тАв AI Portal'[39m }
 [90m   |[39m              [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 5 |[39m
 [90m 6 |[39m [36mexport[39m [36mdefault[39m [36mfunction[39m [33mSettingsPage[39m(){
 [90m 7 |[39m 	[36mconst[39m [theme[33m,[39m setTheme] [33m=[39m useState[33m<[39m[32m'light'[39m[33m|[39m[32m'dark'[39m[33m>[39m(() [33m=>[39m ([36mtypeof[39m window [33m!==[39m [32m'undefined'[39m [33m?[39m ((localStorage[33m.[39mgetItem([32m'theme'[39m) [36mas[39m any) [33m||[39m [32m'dark'[39m) [33m:[39m [32m'dark'[39m))[0m

You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client



Import traces:
  Client Component Browser:
    ./app/settings/page.tsx [Client Component Browser]
    ./app/settings/page.tsx [Server Component]

  Client Component SSR:
    ./app/settings/page.tsx [Client Component SSR]
    ./app/settings/page.tsx [Server Component]


[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/users" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/users" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
 тип ./app/admin/settings/page.tsx:4:14
Ecmascript file had an error
[0m [90m 2 |[39m [36mimport[39m { useEffect[33m,[39m useState[33m,[39m [33mFormEvent[39m } [36mfrom[39m [32m'react'[39m
 [90m 3 |[39m
[31m[1m>[22m[39m[90m 4 |[39m [36mexport[39m [36mconst[39m metadata [33m=[39m { title[33m:[39m [32m'Admin тАв Settings тАв AI Portal'[39m }
 [90m   |[39m              [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 5 |[39m
 [90m 6 |[39m [36mexport[39m [36mdefault[39m [36mfunction[39m [33mAdminSettingsPage[39m(){
 [90m 7 |[39m 	[36mconst[39m [form[33m,[39m setForm] [33m=[39m useState({ model[33m:[39m [32m''[39m[33m,[39m maxTokens[33m:[39m [32m''[39m[33m,[39m timeoutMs[33m:[39m [32m''[39m[33m,[39m temperature[33m:[39m [32m''[39m[33m,[39m top_p[33m:[39m [32m''[39m })[0m

You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client



Import traces:
  Client Component Browser:
    ./app/admin/settings/page.tsx [Client Component Browser]
    ./app/admin/settings/page.tsx [Server Component]

  Client Component SSR:
    ./app/admin/settings/page.tsx [Client Component SSR]
    ./app/admin/settings/page.tsx [Server Component]


Error: Route "/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminModelPage (app\admin\model\page.tsx:5:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminModelPage (app\admin\model\page.tsx:5:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:20)
   6 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 | 	const hdrs = headers()
>  8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     | 	                  ^
   9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:21)
   7 | 	const hdrs = headers()
   8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
     | 	                   ^
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
  12 | 	if (process.env.NODE_ENV !== 'production') (extraHeaders as any)['x-test-bypass'] = '1'
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLogsPage (app\admin\logs\page.tsx:8:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLogsPage (app\admin\logs\page.tsx:8:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[Error: aborted] { code: 'ECONNRESET' }
 тип uncaughtException: [Error: aborted] { code: 'ECONNRESET' }
 тип uncaughtException:  [Error: aborted] { code: 'ECONNRESET' }
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
 тип ./app/(auth)/reset/page.tsx:5:14
Ecmascript file had an error
[0m [90m 3 |[39m [36mimport[39m { useRouter } [36mfrom[39m [32m'next/navigation'[39m
 [90m 4 |[39m
[31m[1m>[22m[39m[90m 5 |[39m [36mexport[39m [36mconst[39m metadata [33m=[39m { title[33m:[39m [32m'р╕ер╕╖р╕бр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ тАв AI Portal'[39m }
 [90m   |[39m              [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 6 |[39m
 [90m 7 |[39m [36mexport[39m [36mdefault[39m [36mfunction[39m [33mResetPage[39m(){
 [90m 8 |[39m 	[36mconst[39m [email[33m,[39m setEmail] [33m=[39m useState([32m''[39m)[0m

You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client



Import traces:
  Client Component Browser:
    ./app/(auth)/reset/page.tsx [Client Component Browser]
    ./app/(auth)/reset/page.tsx [Server Component]

  Client Component SSR:
    ./app/(auth)/reset/page.tsx [Client Component SSR]
    ./app/(auth)/reset/page.tsx [Server Component]


Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
 тип ./app/(auth)/register/page.tsx:4:14
Ecmascript file had an error
[0m [90m 2 |[39m [36mimport[39m { useState } [36mfrom[39m [32m'react'[39m
 [90m 3 |[39m
[31m[1m>[22m[39m[90m 4 |[39m [36mexport[39m [36mconst[39m metadata [33m=[39m { title[33m:[39m [32m'р╕кр╕бр╕▒р╕Др╕гр╕кр╕бр╕▓р╕Кр╕┤р╕Б тАв AI Portal'[39m }
 [90m   |[39m              [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 5 |[39m
 [90m 6 |[39m [36mexport[39m [36mdefault[39m [36mfunction[39m [33mRegisterPage[39m(){
 [90m 7 |[39m 	[36mconst[39m [email[33m,[39m setEmail] [33m=[39m useState([32m''[39m)[0m

You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client



Import traces:
  Client Component Browser:
    ./app/(auth)/register/page.tsx [Client Component Browser]
    ./app/(auth)/register/page.tsx [Server Component]

  Client Component SSR:
    ./app/(auth)/register/page.tsx [Client Component SSR]
    ./app/(auth)/register/page.tsx [Server Component]


Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
 тип ./app/settings/page.tsx:4:14
Ecmascript file had an error
[0m [90m 2 |[39m [36mimport[39m { useEffect[33m,[39m useState } [36mfrom[39m [32m'react'[39m
 [90m 3 |[39m
[31m[1m>[22m[39m[90m 4 |[39m [36mexport[39m [36mconst[39m metadata [33m=[39m { title[33m:[39m [32m'Settings тАв AI Portal'[39m }
 [90m   |[39m              [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 5 |[39m
 [90m 6 |[39m [36mexport[39m [36mdefault[39m [36mfunction[39m [33mSettingsPage[39m(){
 [90m 7 |[39m 	[36mconst[39m [theme[33m,[39m setTheme] [33m=[39m useState[33m<[39m[32m'light'[39m[33m|[39m[32m'dark'[39m[33m>[39m(() [33m=>[39m ([36mtypeof[39m window [33m!==[39m [32m'undefined'[39m [33m?[39m ((localStorage[33m.[39mgetItem([32m'theme'[39m) [36mas[39m any) [33m||[39m [32m'dark'[39m) [33m:[39m [32m'dark'[39m))[0m

You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client



Import traces:
  Client Component Browser:
    ./app/settings/page.tsx [Client Component Browser]
    ./app/settings/page.tsx [Server Component]

  Client Component SSR:
    ./app/settings/page.tsx [Client Component SSR]
    ./app/settings/page.tsx [Server Component]


Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/users" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/settings" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/settings" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminModelPage (app\admin\model\page.tsx:5:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminModelPage (app\admin\model\page.tsx:5:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:20)
   6 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 | 	const hdrs = headers()
>  8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     | 	                  ^
   9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:21)
   7 | 	const hdrs = headers()
   8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
     | 	                   ^
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
  12 | 	if (process.env.NODE_ENV !== 'production') (extraHeaders as any)['x-test-bypass'] = '1'
 тип ./app/(auth)/reset/page.tsx:5:14
Ecmascript file had an error
[0m [90m 3 |[39m [36mimport[39m { useRouter } [36mfrom[39m [32m'next/navigation'[39m
 [90m 4 |[39m
[31m[1m>[22m[39m[90m 5 |[39m [36mexport[39m [36mconst[39m metadata [33m=[39m { title[33m:[39m [32m'р╕ер╕╖р╕бр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ тАв AI Portal'[39m }
 [90m   |[39m              [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 6 |[39m
 [90m 7 |[39m [36mexport[39m [36mdefault[39m [36mfunction[39m [33mResetPage[39m(){
 [90m 8 |[39m 	[36mconst[39m [email[33m,[39m setEmail] [33m=[39m useState([32m''[39m)[0m

You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client



Import traces:
  Client Component Browser:
    ./app/(auth)/reset/page.tsx [Client Component Browser]
    ./app/(auth)/reset/page.tsx [Server Component]

  Client Component SSR:
    ./app/(auth)/reset/page.tsx [Client Component SSR]
    ./app/(auth)/reset/page.tsx [Server Component]


 тип ./app/(auth)/register/page.tsx:4:14
Ecmascript file had an error
[0m [90m 2 |[39m [36mimport[39m { useState } [36mfrom[39m [32m'react'[39m
 [90m 3 |[39m
[31m[1m>[22m[39m[90m 4 |[39m [36mexport[39m [36mconst[39m metadata [33m=[39m { title[33m:[39m [32m'р╕кр╕бр╕▒р╕Др╕гр╕кр╕бр╕▓р╕Кр╕┤р╕Б тАв AI Portal'[39m }
 [90m   |[39m              [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 5 |[39m
 [90m 6 |[39m [36mexport[39m [36mdefault[39m [36mfunction[39m [33mRegisterPage[39m(){
 [90m 7 |[39m 	[36mconst[39m [email[33m,[39m setEmail] [33m=[39m useState([32m''[39m)[0m

You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client



Import traces:
  Client Component Browser:
    ./app/(auth)/register/page.tsx [Client Component Browser]
    ./app/(auth)/register/page.tsx [Server Component]

  Client Component SSR:
    ./app/(auth)/register/page.tsx [Client Component SSR]
    ./app/(auth)/register/page.tsx [Server Component]


Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
 тип ./app/settings/page.tsx:4:14
Ecmascript file had an error
[0m [90m 2 |[39m [36mimport[39m { useEffect[33m,[39m useState } [36mfrom[39m [32m'react'[39m
 [90m 3 |[39m
[31m[1m>[22m[39m[90m 4 |[39m [36mexport[39m [36mconst[39m metadata [33m=[39m { title[33m:[39m [32m'Settings тАв AI Portal'[39m }
 [90m   |[39m              [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 5 |[39m
 [90m 6 |[39m [36mexport[39m [36mdefault[39m [36mfunction[39m [33mSettingsPage[39m(){
 [90m 7 |[39m 	[36mconst[39m [theme[33m,[39m setTheme] [33m=[39m useState[33m<[39m[32m'light'[39m[33m|[39m[32m'dark'[39m[33m>[39m(() [33m=>[39m ([36mtypeof[39m window [33m!==[39m [32m'undefined'[39m [33m?[39m ((localStorage[33m.[39mgetItem([32m'theme'[39m) [36mas[39m any) [33m||[39m [32m'dark'[39m) [33m:[39m [32m'dark'[39m))[0m

You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client



Import traces:
  Client Component Browser:
    ./app/settings/page.tsx [Client Component Browser]
    ./app/settings/page.tsx [Server Component]

  Client Component SSR:
    ./app/settings/page.tsx [Client Component SSR]
    ./app/settings/page.tsx [Server Component]


Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/users" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/settings" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/settings" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:20)
   6 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 | 	const hdrs = headers()
>  8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     | 	                  ^
   9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:21)
   7 | 	const hdrs = headers()
   8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
     | 	                   ^
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
  12 | 	if (process.env.NODE_ENV !== 'production') (extraHeaders as any)['x-test-bypass'] = '1'
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/users" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/users" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLogsPage (app\admin\logs\page.tsx:8:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLogsPage (app\admin\logs\page.tsx:8:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:8:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:8:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/settings" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/settings" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminSystemPage (app\admin\system\page.tsx:5:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminSystemPage (app\admin\system\page.tsx:5:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminModelPage (app\admin\model\page.tsx:5:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminModelPage (app\admin\model\page.tsx:5:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:20)
   6 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 | 	const hdrs = headers()
>  8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     | 	                  ^
   9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:21)
   7 | 	const hdrs = headers()
   8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
     | 	                   ^
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
  12 | 	if (process.env.NODE_ENV !== 'production') (extraHeaders as any)['x-test-bypass'] = '1'
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLogsPage (app\admin\logs\page.tsx:8:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLogsPage (app\admin\logs\page.tsx:8:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\admin\model\route.ts:27:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\admin\model\route.ts:27:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
 тип [Error: Module [project]/app/admin/sidebar.tsx [app-ssr] (ecmascript) was instantiated because it was required from module [project]/node_modules/next/dist/esm/build/templates/app-page.js?page=/chat/page { GLOBAL_ERROR_MODULE => "[project]/node_modules/next/dist/client/components/builtin/global-error.js [app-rsc] (ecmascript, Next.js Server Component)", METADATA_0 => "[project]/app/favicon.ico.mjs { IMAGE => \"[project]/app/favicon.ico (static in ecmascript)\" } [app-rsc] (structured image object, ecmascript, Next.js Server Component)", MODULE_1 => "[project]/app/layout.tsx [app-rsc] (ecmascript, Next.js Server Component)", MODULE_2 => "[project]/node_modules/next/dist/client/components/builtin/not-found.js [app-rsc] (ecmascript, Next.js Server Component)", MODULE_3 => "[project]/node_modules/next/dist/client/components/builtin/forbidden.js [app-rsc] (ecmascript, Next.js Server Component)", MODULE_4 => "[project]/node_modules/next/dist/client/components/builtin/unauthorized.js [app-rsc] (ecmascript, Next.js Server Component)", MODULE_5 => "[project]/node_modules/next/dist/client/components/builtin/global-error.js [app-rsc] (ecmascript, Next.js Server Component)", MODULE_6 => "[project]/app/chat/layout.tsx [app-rsc] (ecmascript, Next.js Server Component)", MODULE_7 => "[project]/app/chat/page.tsx [app-rsc] (ecmascript, Next.js Server Component)" } [app-rsc] (ecmascript) <locals>, but the module factory is not available.] {
  digest: '3877283053'
}
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:8:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:8:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:20)
   6 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 | 	const hdrs = headers()
>  8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     | 	                  ^
   9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:21)
   7 | 	const hdrs = headers()
   8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
     | 	                   ^
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
  12 | 	if (process.env.NODE_ENV !== 'production') (extraHeaders as any)['x-test-bypass'] = '1'
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/stats/trends" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/stats/trends" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/stats/trends" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/stats/trends" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\stats\trends\route.ts:16:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminStatsPage (app\admin\stats\page.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]/messages" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\[id]\messages\route.ts:44:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats/[id]/messages" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\[id]\messages\route.ts:44:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:46:65)
  44 | 	const session = await getSessionOrBypass()
  45 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 46 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  47 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  48 |
  49 | 	const { content } = await req.json()
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[Error: failed to pipe response] { [cause]: 'timeout' }
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/search" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\search\route.ts:45:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/search" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\search\route.ts:45:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
FTS search fallback: Error [PrismaClientKnownRequestError]: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `1`. Message: `near "exists": syntax error`
    at async ensureFtsReady (app\api\search\route.ts:9:39)
    at async GET (app\api\search\route.ts:53:9)
   7 | async function ensureFtsReady() {
   8 |     // Create FTS table and triggers if they do not exist
>  9 |     const [{ exists: tableExists }] = await prisma.$queryRawUnsafe<any[]>(
     |                                       ^
  10 |         "SELECT EXISTS(SELECT 1 FROM sqlite_master WHERE type='table' AND name='message_fts') as exists"
  11 |     )
  12 |     if (!tableExists) { {
  code: 'P2010',
  meta: [Object],
  clientVersion: '6.15.0'
}
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/admin/users" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/users" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLogsPage (app\admin\logs\page.tsx:8:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLogsPage (app\admin\logs\page.tsx:8:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/api/admin/logs" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\logs\route.ts:8:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/logs" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\logs\route.ts:8:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/admin/settings" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/settings" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/stats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/stats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminLayout (app\admin\layout.tsx:6:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async AdminModelPage (app\admin\model\page.tsx:5:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async AdminModelPage (app\admin\model\page.tsx:5:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:20)
   6 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 | 	const hdrs = headers()
>  8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     | 	                  ^
   9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:21)
   7 | 	const hdrs = headers()
   8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
     | 	                   ^
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
  12 | 	if (process.env.NODE_ENV !== 'production') (extraHeaders as any)['x-test-bypass'] = '1'
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatIndexPage (app\chat\page.tsx:8:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:20)
   6 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 | 	const hdrs = headers()
>  8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     | 	                  ^
   9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:21)
   7 | 	const hdrs = headers()
   8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
     | 	                   ^
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
  12 | 	if (process.env.NODE_ENV !== 'production') (extraHeaders as any)['x-test-bypass'] = '1'
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/system" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:8:23)
   6 |     if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 |     const hdrs = headers()
>  8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     |                       ^
   9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
Error: Route "/admin/system" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminSystemPage (app\admin\system\page.tsx:9:24)
   7 |     const hdrs = headers()
   8 |     const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 |     const proto = hdrs.get('x-forwarded-proto') || 'http'
     |                        ^
  10 |     const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 |     const res = await fetch(`${base}/api/admin/system`, { cache: 'no-store' })
  12 |     const data = res.ok ? await res.json() : null
Error: Route "/api/admin/system" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\system\route.ts:9:21)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/system" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\system\route.ts:9:21)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:20)
   6 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 | 	const hdrs = headers()
>  8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     | 	                  ^
   9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:21)
   7 | 	const hdrs = headers()
   8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
     | 	                   ^
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
  12 | 	if (process.env.NODE_ENV !== 'production') (extraHeaders as any)['x-test-bypass'] = '1'
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async POST (app\api\chats\route.ts:19:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async POST (app\api\chats\route.ts:19:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatPage (app\chat\[id]\page.tsx:7:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/chat/[id]" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/chat/[id]" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async ChatLayout (app\chat\layout.tsx:11:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/api/chats" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\chats\route.ts:6:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/chats" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\chats\route.ts:6:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:46:65)
  44 | 	const session = await getSessionOrBypass()
  45 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 46 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  47 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  48 |
  49 | 	const { content } = await req.json()
[Error: failed to pipe response] { [cause]: 'timeout' }
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:46:65)
  44 | 	const session = await getSessionOrBypass()
  45 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 46 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  47 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  48 |
  49 | 	const { content } = await req.json()
[Error: failed to pipe response] { [cause]: 'timeout' }
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/api/chats/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at DELETE (app\api\chats\[id]\route.ts:30:49)
  28 | 	const session = await getSessionOrBypass()
  29 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 30 | 	await prisma.chat.delete({ where: { id: params.id } })
     | 	                                               ^
  31 | 	return NextResponse.json({ ok: true })
  32 | }
  33 |
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:46:65)
  44 | 	const session = await getSessionOrBypass()
  45 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 46 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  47 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  48 |
  49 | 	const { content } = await req.json()
[Error: failed to pipe response] { [cause]: 'timeout' }
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:46:65)
  44 | 	const session = await getSessionOrBypass()
  45 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 46 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  47 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  48 |
  49 | 	const { content } = await req.json()
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:46:65)
  44 | 	const session = await getSessionOrBypass()
  45 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 46 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  47 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  48 |
  49 | 	const { content } = await req.json()
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:46:65)
  44 | 	const session = await getSessionOrBypass()
  45 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 46 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  47 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  48 |
  49 | 	const { content } = await req.json()
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:46:65)
  44 | 	const session = await getSessionOrBypass()
  45 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 46 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  47 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  48 |
  49 | 	const { content } = await req.json()
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:46:65)
  44 | 	const session = await getSessionOrBypass()
  45 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 46 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  47 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  48 |
  49 | 	const { content } = await req.json()
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:46:65)
  44 | 	const session = await getSessionOrBypass()
  45 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 46 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  47 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  48 |
  49 | 	const { content } = await req.json()
[next-auth][warn][NEXTAUTH_URL] 
https://next-auth.js.org/warnings#nextauth_url
Error: Route "/chat/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:9:65)
   7 | 	const session = await getSessionOrBypass()
   8 | 	if (!session?.user?.id) return notFound()
>  9 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
  12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
Error: Route "/chat/[id]" used `searchParams.q`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at ChatPage (app\chat\[id]\page.tsx:12:19)
  10 | 	if (!chat) return notFound()
  11 | 	const messages = await prisma.message.findMany({ where: { chatId: chat.id }, orderBy: { createdAt: 'asc' } })
> 12 | 	const q = typeof searchParams?.q === 'string' ? searchParams.q : ''
     | 	                 ^
  13 | 	if (q && q.trim()){
  14 | 		messages.push({ id: 'temp-q', chatId: chat.id, role: 'user', content: q.trim(), createdAt: new Date() } as any)
  15 | 	}
Error: Route "/admin/model" used `headers().get('x-forwarded-host')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:8:20)
   6 | 	if (!session?.user?.id || session.user.role !== 'ADMIN') return <div className="p-6 text-white">Forbidden</div>
   7 | 	const hdrs = headers()
>  8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
     | 	                  ^
   9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
Error: Route "/admin/model" used `headers().get('x-forwarded-proto')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at AdminModelPage (app\admin\model\page.tsx:9:21)
   7 | 	const hdrs = headers()
   8 | 	const host = hdrs.get('x-forwarded-host') || hdrs.get('host') || 'localhost:3000'
>  9 | 	const proto = hdrs.get('x-forwarded-proto') || 'http'
     | 	                   ^
  10 | 	const base = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || `${proto}://${host}`
  11 | 	const extraHeaders: HeadersInit = {}
  12 | 	if (process.env.NODE_ENV !== 'production') (extraHeaders as any)['x-test-bypass'] = '1'
Error: Route "/api/admin/model" used `headers().get('x-e2e-role')`. `headers()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:20:27)
    at async GET (app\api\admin\model\route.ts:9:18)
  18 | 	try {
  19 | 		const hdrs = headers()
> 20 | 		const roleHeader = hdrs.get('x-e2e-role')
     | 		                        ^
  21 | 		if (roleHeader) role = (roleHeader.toUpperCase() as any)
  22 | 	} catch {}
  23 | 	try {
Error: Route "/api/admin/model" used `cookies().get('e2e_role')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at getSessionOrBypass (lib\session.ts:25:34)
    at async GET (app\api\admin\model\route.ts:9:18)
  23 | 	try {
  24 | 		const cookieStore = cookies()
> 25 | 		const cookieRole = cookieStore.get('e2e_role')?.value
     | 		                               ^
  26 | 		if (cookieRole) role = (cookieRole.toUpperCase() as any)
  27 | 	} catch {}
  28 | 	return { user: { id: user.id, email: user.email, name: user.name ?? undefined, role } } as any
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:46:65)
  44 | 	const session = await getSessionOrBypass()
  45 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 46 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  47 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  48 |
  49 | 	const { content } = await req.json()
Error: Route "/api/chats/[id]/messages" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at POST (app\api\chats\[id]\messages\route.ts:46:65)
  44 | 	const session = await getSessionOrBypass()
  45 | 	if (!session?.user?.id) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
> 46 | 	const chat = await prisma.chat.findFirst({ where: { id: params.id, userId: session.user.id as string } })
     | 	                                                               ^
  47 | 	if (!chat) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  48 |
  49 | 	const { content } = await req.json()
